{"version":3,"sources":["util/index.ts","lib/Nbt/NbtArrayItem.ts","lib/stringify/map.ts","lib/Nbt/NbtItem.ts","util/rule.ts","comps/List/index.tsx","comps/Compound/index.tsx","config/const.ts","lib/parse/config/NbtStore.ts","view/World/index.tsx","App.tsx","index.tsx"],"names":["merge","result","args","forEach","object","key","hasOwnProperty","emt","Array","isArray","trimEnd","raw","char","e","i","length","reg","RegExp","test","charAt","substr","NbtArrayItem","tpl","nbtStore","count","value","this","add","index","push","NbtItem","splice","reduce","s","v","toString","map","item","toJson","toPureJson","path","newPath","title","children","toTree","mapSuffix","dynamic","nbt","has","actIndex","initActIndex","initItems","actNbt","obj","p","k","one","get","node","type","includes","getComponentByName","clear","undefined","isSimpleType","default","subtype","from","minItems","fill","nbtItem","name","data","getNbtObjectByName","link","triggerHandle","addAttr","Object","keys","removeHandle","indexOf","handle","linkType","join","numberRule","byte","min","max","step","precision","short","int","long","float","double","List","props","useContext","NbtContext","store","dispatch","useState","visible","setVisible","mark","setMark","paddingLeft","indent","formInputChange","payload","label","remove","mouseEnter","stopPropagation","mouseOut","width","span","style","paddingBottom","onMouseEnter","onMouseLeave","textAlign","padding","description","className","marginLeft","Group","compact","marginBottom","placeholder","onChange","target","rules","disabled","onClick","PlusOutlined","DeleteOutlined","UpOutlined","DownOutlined","Fragment","offset","CloseOutlined","paddingRight","paddingTop","color","btns","getField","Compound","keyOptions","setKeyOptions","tplOptions","setTplOptions","useEffect","compound","$nbtStore","options","id","tplCompound","componentOptions","componentValue","subTpl","$map","getOptionsData","enum","showSearch","allowClear","notFoundContent","formSelectChange","Option","nbtProp","listValue","checked","formSwitchChange","formInputNumberChange","componentChange","cls","findIndex","mode","maxTagCount","onDeselect","dropdownRender","menu","Text","defaultValue","margin","maxTagPlaceholder","onSelect","getItem","console","log","json","JSON","stringify","copy","message","success","SnippetsOutlined","createItem","NbtStore","exec","nbtKey","build","initEnum","inst","base","filter","root","Number","isInteger","initialState","nbtJson","React","createContext","reducer","state","action","setNbt","setTpl","setIndex","getNbt","useReducer","treeData","setTreeData","rootNodes","setRootNodes","tagClick","tplName","fetch","then","res","nodes","getRootNodes","notification","duration","Provider","defaultExpandAll","showLine","height","checkedChildren","unCheckedChildren","getTpl","ReactDOM","render","href","document","getElementById"],"mappings":"ulBAmBO,SAASA,IAAwC,IAAC,IAAnCC,EAAkC,uDAApB,GAAoB,mBAAbC,EAAa,iCAAbA,EAAa,kBAWpD,OAVAA,EAAKC,SAAQ,SAACC,GACV,IAAK,IAAMC,KAAOD,EACd,GAAIA,EAAOE,eAAeD,GAAM,CAC5B,IAAME,EAAMH,EAAOC,GACnBJ,EAAOI,GAAsB,kBAARE,GAAoBC,MAAMC,QAAQF,GACjDA,EACAP,EAAMC,EAAOI,GAAME,OAI9BN,EASJ,SAASS,EAAQC,GAIpB,IAJmD,IAAlBC,EAAiB,uDAAZ,GAClCC,EAAY,MAARD,GAAyB,KAATA,EAAc,IAAMA,EACxCE,EAAIH,EAAII,OACRC,EAAM,IAAIC,OAAOJ,GACfG,EAAIE,KAAKP,EAAIQ,SAASL,MAC5B,OAAOH,EAAIS,OAAO,EAAGN,EAAI,G,ICxCRO,E,WAKjB,WAAYC,EAAaC,GAAgC,IAAZC,EAAW,uDAAH,EAGjD,IAHoD,yBAJhDC,MAAmB,GAI6B,KAHhDF,cAGgD,OAFhDD,IAAc,GAGlBI,KAAKJ,IAAMA,EACXI,KAAKH,SAAWA,EACVC,KACFE,KAAKC,M,gDAIFC,GACP,OAAOF,KAAKD,MAAMG,K,4BAIlBF,KAAKD,MAAMI,KAAK,IAAIC,EAAQJ,KAAKJ,IAAKI,KAAKH,a,6BAGjCK,GACVF,KAAKD,MAAMM,OAAOH,EAAO,K,8BAIzBF,KAAKD,MAAQ,K,iCAIb,IAAMxB,EAASyB,KAAKD,MAAMO,QAAO,SAACC,EAAGC,GAEjC,OADAD,GAAKC,EAAEC,WAAa,MAErB,IACH,MAAM,IAAN,OAAWzB,EAAQT,EAAQ,KAA3B,O,+BAIA,MAAO,CACHqB,IAAKI,KAAKJ,IACVG,MAAOC,KAAKD,MAAMW,KAAI,SAAAC,GAAI,OAAIA,EAAKC,e,mCAKvC,OAAOZ,KAAKD,MAAMW,KAAI,SAAAC,GAAI,OAAIA,EAAKE,kB,+BAGE,IAA3BC,EAA0B,uDAAT,GAC3B,OAAOd,KAAKD,MAAMW,KAAI,SAACC,EAAMT,GACzB,IAAMa,EAAO,sBAAOD,GAAP,CAAaZ,EAAQ,KAClC,MAAO,CACHc,MAAM,GAAD,OAAKF,EAAKA,EAAKzB,OAAS,GAAxB,YAA8Ba,GACnCvB,IAAKoC,EACLE,SAAUN,EAAKO,OAAOH,W,KC1DzBI,EAAwC,CACnD,KAAQ,IACR,KAAQ,IACR,MAAS,IACT,KAAQ,IACR,MAAS,IACT,OAAU,IACV,IAAO,GACP,OAAU,GACV,KAAQ,ICMWf,E,WAoCjB,WAAYR,EAAaC,GAAsC,IAAlBuB,EAAiB,iFAnCtDC,IAAW,GAmC2C,KAlCtDzB,IAAc,GAkCwC,KAjCtDwB,aAiCsD,OAhCtDvB,cAgCsD,OA/BtDyB,IAAgB,GA+BsC,KA9BtDC,UAAY,EA+BhBvB,KAAKJ,IAAMA,EACXI,KAAKH,SAAWA,EAChBG,KAAKoB,QAAUA,EACfpB,KAAKwB,eACLxB,KAAKyB,UAAUzB,KAAMJ,G,yDAjCH8B,EAAiBZ,GAGnC,IAAIa,EAFJ,GAAKD,EACL,OAAKZ,EAAKzB,QAEVyB,EAAKR,QACD,SAACC,EAAYqB,GACT,IAAMP,EAAMd,EAAEc,IACd,GAAIvC,MAAMC,QAAQ6C,GAAI,CAAC,IAAD,cACHA,EADG,GACXC,EADW,KACRzC,EADQ,KAGZ0C,EADOT,EAAIQ,GACAE,IAAI3C,GAErB,OADAuC,EAAMG,EACCA,EAEP,IAAME,EAAOX,EAAIO,GAEjB,OADAD,EAAMK,EACCA,IAGfN,GAEGC,GAnBkBD,I,mCAsBFO,GACvB,MAAO,CAAC,OAAQ,MAAO,SAAU,OAAQ,QAAS,SAAU,OAAQ,QAAS,SAAU,QAAQC,SAASD,O,oDAYxG,IAAMZ,EAAMrB,KAAKH,SAASsC,mBAAmBnC,KAAKJ,KAAKyB,IACnDvC,MAAMC,QAAQsC,KACdrB,KAAKuB,SAAW,EAChBvB,KAAKyB,UAAUzB,KAAMqB,EAAI,O,+BAK7B,OAAOrB,KAAKJ,M,6BAGFA,GACVI,KAAKJ,IAAMA,EACXI,KAAKoC,QACLpC,KAAKyB,UAAUzB,KAAMJ,K,+BAGTM,GACZF,KAAKuB,SAAWrB,EAChBF,KAAKoC,QACL,IAAMf,EAAMrB,KAAKH,SAASsC,mBAAmBnC,KAAKJ,KAAKyB,IACvDrB,KAAKyB,UAAUzB,KAAMqB,EAAInB,M,6BAGfvB,GACV,OAAOqB,KAAKqB,IAAI1C,K,6BAGNA,EAAaoB,EAAYG,QACrBmC,IAAVnC,EACAF,KAAKqB,IAAI1C,GAAKoB,MAAQA,EAEtBC,KAAKqB,IAAI1C,GAAKoB,MAAMG,GAASH,I,8BAIrBpB,EAAagD,GACzB,IAAI3B,KAAKsB,IAAIY,SAASvD,GAAtB,CAGA,GAAIyB,EAAQkC,aAAaX,EAAIM,MACzBjC,KAAKqB,IAAI1C,GAAO,CACZoB,MAAO4B,EAAIY,QACXN,KAAMN,EAAIM,WAGd,GAAiB,SAAbN,EAAIM,KACuB,kBAAhBN,EAAIa,UACPpC,EAAQkC,aAAaX,EAAIa,SACzBxC,KAAKqB,IAAI1C,GAAO,CACZoB,MAAOjB,MAAM2D,KAAK,CAAEpD,OAAQsC,EAAIe,WAAYC,KAAK,IACjDV,KAAM,OACNO,QAASb,EAAIa,SAGjBxC,KAAKqB,IAAI1C,GAAO,IAAIgB,EAAagC,EAAIa,QAASxC,KAAKH,SAAU8B,EAAIe,eAGtE,CACH,IAAM9C,EAAMd,MAAMC,QAAQ4C,EAAIa,SAAWb,EAAIa,QAAQ,GAAKb,EAAIa,QACxDI,EAAU,IAAIxC,EAAQR,EAAKI,KAAKH,WAAYD,GAClDI,KAAKyB,UAAUmB,EAAShD,GACxBI,KAAKqB,IAAI1C,GAAOiE,EAGxB5C,KAAKsB,IAAInB,KAAKxB,M,gCAGAiE,EAAkBhD,GAAc,IACtC0B,EAAQtB,KAAKH,SAASsC,mBAAmBvC,GAAzC0B,IACJA,IACIxC,MAAMC,QAAQuC,GACdA,EAAI7C,SAAQ,SAAAE,GAAG,OAAIiE,EAAQ3C,IAAItB,MAE/BiE,EAAQ3C,S,0BAKT4C,GAAgB,IAAD,OAChBC,EAAO9C,KAAKH,SAASkD,mBAAmB/C,KAAKJ,IAAKI,KAAKuB,UAC7D,GAAKsB,EAAL,CAFsB,IAMdG,EAASF,EAAKD,GAAdG,MACR,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAM3D,QACNW,KAAKiD,cAAcH,EAAME,GAAM,SAACrE,EAAKgC,GAAN,OAAe,EAAKuC,QAAQvE,EAAKgC,MAEhEX,KAAKkD,QAAQL,EAAMC,EAAKD,SAPxBM,OAAOC,KAAKN,GAAMpC,KAAI,SAAA/B,GAAG,OAAI,EAAKuE,QAAQvE,EAAKmE,EAAKnE,S,6BAW9CkE,GAAe,IAAD,OAClBC,EAAO9C,KAAKH,SAASkD,mBAAmB/C,KAAKJ,IAAKI,KAAKuB,UACrDyB,EAASF,EAAKD,GAAdG,MACR,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAM3D,QACNW,KAAKiD,cAAcH,EAAME,GAAM,SAACrE,GAAD,OAAiB,EAAK0E,aAAa1E,MAElEqB,KAAKqD,aAAaR,K,mCAILlE,UACVqB,KAAKqB,IAAI1C,GAChBqB,KAAKsB,IAAIjB,OAAOL,KAAKsB,IAAIgC,QAAQ3E,GAAM,K,oCAGrBmE,EAAyBE,EAAgBO,GAC3DJ,OAAOC,KAAKN,GAAMrE,SAAQ,SAAAE,GAClBqE,EAAKd,SAASY,EAAKnE,GAAK6E,WACxBD,EAAO5E,EAAKmE,EAAKnE,S,8BAMzBqB,KAAKsB,IAAM,GACXtB,KAAKqB,IAAM,K,iCAGI,IAAD,OACR9C,EAAS4E,OAAOC,KAAKpD,KAAKqB,KAAKf,QAAO,SAACC,EAAGsB,GAC5C,IAAMlB,EAAO,EAAKU,IAAIQ,GAoBtB,OAnBIlB,aAAgBhB,GAAgBgB,aAAgBP,EAChDG,GAAC,UAAOsB,EAAP,YAAYlB,EAAKF,WAAjB,KACoB,SAAdE,EAAKsB,KACS,WAAjBtB,EAAK6B,QACLjC,GAAC,UAAOsB,EAAP,cAAclB,EAAKZ,MAAM0D,KAAK,OAA9B,OAEDlD,GAAC,UAAOsB,EAAP,aAAalB,EAAKZ,MAAMW,KAAI,SAACvB,GAAD,OAAaA,GAAQ,GAAKgC,EAAUR,EAAK6B,YAAUiB,KAAK,KAApF,MAGa,SAAd9C,EAAKsB,KACL1B,GAAC,UAAOsB,EAAP,aAAalB,EAAKZ,MAAlB,MACoB,WAAdY,EAAKsB,KACZ1B,GAAC,UAAOsB,EAAP,YAAYlB,EAAKZ,MAAQY,EAAKZ,MAAQ,KAAtC,KACoB,SAAdY,EAAKsB,KACZ1B,GAAC,UAAOsB,EAAP,kBAA4BQ,IAAf1B,EAAKZ,MAAsB,GAAKY,EAAKZ,MAAlD,MAEDQ,GAAC,UAAOsB,EAAP,YAA2B,KAAflB,EAAKZ,MAAe,EAAIY,EAAKZ,OAAzC,OAAiDoB,EAAUR,EAAKsB,MAAhE,KAGF1B,IACR,IACH,MAAM,IAAN,OAAWvB,EAAQT,EAAQ,KAA3B,O,+BAGkB,IAAD,OACjB,MAAO,CACHqB,IAAKI,KAAKJ,IACV0B,IAAI,YAAKtB,KAAKsB,KACdpB,MAAOF,KAAKuB,SACZH,QAASpB,KAAKoB,QACdC,IAAK8B,OAAOC,KAAKpD,KAAKqB,KAAKf,QAAO,SAACqB,EAAUhD,GACzC,IAAMgC,EAAO,EAAKU,IAAI1C,GAUtB,OATAgD,EAAIhD,GAAOgC,aAAgBP,GAErBO,aAAgBhB,EADhBgB,EAAKC,SAGD,CAAEb,MAAOY,EAAKZ,OAEpBY,EAAKS,UACLO,EAAIhD,GAAKiB,IAAMe,EAAKf,KAEjB+B,IACR,O,mCAIe,IAAD,OACrB,OAAOwB,OAAOC,KAAKpD,KAAKqB,KAAKf,QAAO,SAACqB,EAAUhD,GAC3C,IAAMgC,EAAO,EAAKU,IAAI1C,GAMtB,OALIgD,EAAIhD,GAAOgC,aAAgBP,GAErBO,aAAgBhB,EADhBgB,EAAKE,aAGDF,EAAKZ,MACZ4B,IACR,M,+BAGkC,IAAD,OAA1Bb,EAA0B,uDAAT,GAC3B,OAAOqC,OAAOC,KAAKpD,KAAKqB,KAAKX,KAAI,SAAC/B,GAC9B,IAAMgC,EAAO,EAAKU,IAAI1C,GAChBoC,EAAO,sBAAOD,GAAP,CAAanC,IAC1B,MAAO,CACHqC,MAAOrC,EACPA,IAAKoC,EAAQ0C,KAAK,KAClBxC,SAAUN,aAAgBP,GAEpBO,aAAgBhB,EADhBgB,EAAKO,OAAOH,GAGR,W,KC7Pb2C,EAAa,CACtBC,KAAM,CAAEC,KAAM,IAAKC,IAAK,IAAKC,KAAM,EAAGC,UAAW,GACjDC,MAAO,CAAEJ,KAAM,MAAOC,IAAK,MAAOC,KAAM,EAAGC,UAAW,GACtDE,IAAK,CAAEL,KAAM,WAAYC,IAAK,WAAYC,KAAM,EAAGC,UAAW,GAC9DG,KAAM,CAAEJ,KAAM,EAAGC,UAAW,GAC5BI,MAAO,CAAEL,KAAM,GACfM,OAAQ,CAAEN,KAAM,I,6CCYL,SAASO,EAAKC,GAAgB,IAAD,EACZC,qBAAWC,GAA/BC,EADgC,EAChCA,MAAOC,EADyB,EACzBA,SADyB,EAEVC,oBAAS,GAFC,mBAEjCC,EAFiC,KAExBC,EAFwB,OAGhBF,oBAAS,GAHO,mBAGjCG,EAHiC,KAG3BC,EAH2B,KAIlCC,GAAeV,EAAMxD,KAAKzB,OAAS,GAAKoF,EAAMQ,OAEpD,SAASC,EAAgBnF,EAAeG,GACpCwE,EAAS,CAAEzC,KAAM,YAAakD,QAAS,CAAExG,IAAK2F,EAAMc,MAAOtE,KAAMwD,EAAMxD,KAAMf,QAAOG,WA8DxF,SAASmF,EAAOnF,GACZwE,EAAS,CAAEzC,KAAM,eAAgBkD,QAAS,CAAExG,IAAK2F,EAAMc,MAAOtE,KAAMwD,EAAMxD,KAAMZ,WAEpF,SAASoF,EAAWnG,GAChBA,EAAEoG,kBACFR,GAAQ,kBAAM,KAElB,SAASS,EAASrG,GACd4F,GAAQ,kBAAM,KAGlB,GAAIT,EAAMxE,MAAO,CACb,IAAM2F,EAAQ,IAAMnB,EAAMxE,MAAQ,IAClC,GAAsB,WAAlBwE,EAAM9B,QACN,OACI,2BACI,uBAAKkD,KAAM,GAAIC,MAAO,CAAEC,cAAe,IACnC,2BACI,uBAAKC,aAAcP,EAAYQ,aAAcN,EAAUE,KAAM,EAAGC,MAAO,CAAEI,UAAW,QAASC,QAAS,oBAClG,0BAAMhF,MAAOsD,EAAM2B,aAAc3B,EAAMc,QAE3C,uBAAKM,KAAM,IACP,yBAAKQ,UAAU,WAAWP,MAAO,CAAEQ,WAAYnB,IAC3C,sBAAOoB,MAAP,CAAaC,SAAO,GAEZ/B,EAAMvE,MAAMW,KAAI,SAACC,EAAWvB,GAAZ,OACZ,uBAAOT,IAAKS,EAAGW,MAAOY,EAAMgF,MAAO,CAAEW,aAAc,EAAGb,SAASc,YAAY,qBAAMC,SAAW,SAAArH,GAAC,OAAI+F,EAAgB/F,EAAEsH,OAAO1G,MAAOX,eAWzK,IAAMsH,EAAQhD,EAAWY,EAAM9B,SAC/B,OACI,2BACI,uBAAKkD,KAAM,GAAIC,MAAO,CAAEC,cAAe,IACnC,2BACI,uBAAKC,aAAcP,EAAYQ,aAAcN,EAAUE,KAAM,EAAGC,MAAO,CAAEI,UAAW,QAASC,QAAS,oBAClG,0BAAMhF,MAAOsD,EAAM2B,aAAc3B,EAAMc,QAE3C,uBAAKM,KAAM,IACP,yBAAKQ,UAAU,WAAWP,MAAO,CAAEQ,WAAYnB,IAC3C,sBAAOoB,MAAP,CAAaC,SAAO,GAEZ/B,EAAMvE,MAAMW,KAAI,SAACC,EAAWvB,GAAZ,OACZ,qCACIuG,MAAO,CAAEW,aAAc,EAAGb,SAC1B9G,IAAKS,GACDsH,EAHR,CAIIH,YAAY,qBACZxG,MAAOY,EACP6F,SAAU,SAAArH,GAAC,OApHxBY,EAoHkDZ,EApHtCe,EAoHyCd,OAnHhFsF,EAAS,CAAEzC,KAAM,YAAakD,QAAS,CAAExG,IAAK2F,EAAMc,MAAOtE,KAAMwD,EAAMxD,KAAMf,QAAOG,WADxF,IAA+BH,EAAYG,eA+H3C,OACI,uBAAKgG,UAAWpB,EAAI,WAAgB,IAChC,uBAAKY,KAAM,GAAIC,MAAO,CAAEC,cAAe,IACnC,2BACI,uBAAKC,aAAcP,EAAYQ,aAAcN,EAAUE,KAAM,EAAGC,MAAO,CAAEI,UAAW,QAASC,QAAS,oBAClG,8BAAO1B,EAAMc,QAEjB,uBAAKM,KAAM,IACP,yBAAKQ,UAAU,WAAWP,MAAO,CAAEQ,WAAYnB,GAAe,EAAIA,EAAc,IAC5E,sBAAQoB,MAAR,KACI,uBAAQnE,KAAK,QAAQ0E,WAAWrC,EAAMxE,MAAuB8G,QAAU,kBAnF/F/B,GAAW,kBAAM,UACjBH,EAAS,CAAEzC,KAAM,YAAakD,QAAS,CAAExG,IAAK2F,EAAMc,MAAOtE,KAAMwD,EAAMxD,SAkFsCE,MAAM,gBAAK,kBAAC6F,EAAA,EAAD,OAChG,uBAAQ5E,KAAK,QAAQ0E,WAAWrC,EAAMxE,MAAuB8G,QAAU,WAhF/FlC,EAAS,CAAEzC,KAAM,cAAekD,QAAS,CAAExG,IAAK2F,EAAMc,MAAOtE,KAAMwD,EAAMxD,SAgFsCE,MAAM,gBAAK,kBAAC8F,EAAA,EAAD,OAClG,uBAAQ7E,KAAK,QAAQ2E,QAAS,kBAAM/B,GAAW,SAAArE,GAAC,OAAKA,MAAIQ,MAAM,6BAAU4D,EAAU,kBAACmC,EAAA,EAAD,MAAiB,kBAACC,EAAA,EAAD,YAMtHpC,GAtGCN,EAAMvE,MACPuE,EAAMvE,MAAMW,KAAI,SAACC,EAAWvB,GAAZ,OACd,kBAAC,IAAM6H,SAAP,CAAgBtI,IAAKS,GACjB,uBAAKsG,KAAM,IA1C3B,SAAkB3F,EAAeG,GAC7B,OAAQoE,EAAM9B,SACV,IAAK,OACL,IAAK,MACL,IAAK,QACL,IAAK,OACL,IAAK,QACL,IAAK,SACL,IAAK,SACL,IAAK,SACD,OACI,uBAAKmD,MAAO,CAAEC,cAAe,KACzB,uBAAKsB,OAAQ,EAAGxB,KAAM,IAClB,yBAAKQ,UAAU,WAAWP,MAAO,CAAEQ,WAAYnB,IAC3C,uBAAOjF,MAAOA,EAAOwG,YAAY,qBAAMC,SAAW,SAAArH,GAAC,OAAI+F,EAAgB/F,EAAEsH,OAAO1G,MAAOG,QAG/F,uBAAKwF,KAAM,EAAGC,MAAO,CAAEX,YAAa,KAE3BV,EAAMxE,MAAqH,KAA7G,kBAACqH,EAAA,EAAD,CAAexB,MAAO,CAAEyB,aAAc,GAAIC,WAAY,EAAGC,MAAO,OAASV,QAAU,kBAAMvB,EAAOnF,QAKnI,QACI,OAAO,kBAAC,EAAD,CACHqH,KAAM,CACF,uBAAQtF,KAAK,QAAQtD,IAAI,SAASiI,QAAU,kBAAMvB,EAAOnF,KACrD,kBAACiH,EAAA,EAAD,CAAexB,MAAO,CAAE2B,MAAO,WAGvC1H,IAAK0E,EAAM9B,QACXyD,YAAa3B,EAAM2B,YACnBb,MAAOd,EAAM9B,QACbzC,MAAOuE,EAAMvE,MAAMG,GACnBY,KAAI,sBAAMwD,EAAMxD,MAAZ,CAAkB,CAACwD,EAAMc,MAAOlF,QAQ/BsH,CAAS7G,EAAMvB,QAkGD,M,qCC9HxB,SAASqI,EAASnD,GAAgB,IAAD,EAChBC,qBAAWC,GAA/BC,EADoC,EACpCA,MAAOC,EAD6B,EAC7BA,SAD6B,EAERC,mBAAoB,IAFZ,mBAErC+C,EAFqC,KAEzBC,EAFyB,OAGRhD,mBAAoB,IAHZ,mBAGrCiD,EAHqC,KAGzBC,EAHyB,OAIdlD,oBAAS,GAJK,mBAIrCC,EAJqC,KAI5BC,EAJ4B,OAKpBF,oBAAS,GALW,mBAKrCG,EALqC,KAK/BC,EAL+B,KAO5C+C,qBACI,WACI,GAAIxD,EAAM1E,IAAK,CACX,IAAMmI,EAAWtD,EAAMuD,UAAUjF,mBAAmBuB,EAAM1E,IAAK0E,EAAMvE,MAAMG,OACrE+H,EAAU9E,OAAOC,KAAK2E,GAAUrH,KAAI,SAAAF,GAAC,MAAK,CAAE0H,GAAI1H,EAAGqC,KAAMrC,MAC/DmH,GAAc,kBAAMM,KAEpB,IAAME,EAAc1D,EAAMuD,UAAUjF,mBAAmBuB,EAAM1E,KAC7D,GAAId,MAAMC,QAAQoJ,GAAc,CAC5B,IAAMP,EAAaO,EAAYzH,KAAI,SAAAF,GAAC,MAAK,CAAE0H,GAAI1H,EAAGqC,KAAMrC,MACxDqH,GAAc,kBAAMD,SAIhC,CAACtD,EAAM1E,IAAK0E,EAAMvE,MAAMG,QAG5B,IAAM8E,GAAeV,EAAMxD,KAAKzB,OAAS,GAAKoF,EAAMQ,OA6BpD,SAASuC,EAAS5H,EAAayB,EAAwB1C,EAAauB,GAChE,IAAMS,EAAO8D,EAAMuD,UAAUjF,mBAAmBnD,EAAKM,GAAOvB,GAC5D,IAAKgC,EACD,OAAO,KAEX,INxGqBsB,EMwGfmG,EAAmBtJ,MAAMC,QAAQ4B,EAAK6B,SAAW7B,EAAK6B,QAAQ9B,KAAI,SAAAF,GAAC,MAAK,CAAE0H,GAAI1H,EAAGqC,KAAMrC,MAAQ,KAC/F6H,EAAiBvJ,MAAMC,QAAQ4B,EAAK6B,SAAW7B,EAAK6B,QAAQ,GAAK,GACjE4C,EAAQzE,EAAKK,MAAQL,EAAKK,MAAQrC,EAClC2J,EAAS3J,EACf,GAAkB,SAAdgC,EAAKsB,KAAiB,CACtB,IAAMgG,EAzBd,SAAyBA,GACrB,MAA0B,kBAAZA,EAAuBxD,EAAM8D,KAAKN,GAAWA,EAwBvCO,CAAe7H,EAAK8H,MACpC,OACI,kBAAC,IAAMxB,SAAP,CAAgBtI,IAAKA,GACjB,uBAAKgH,MAAO,CAAEI,UAAW,MAAOC,QAAS,mBAAqBN,KAAM,GAChE,uBAAS1E,MAAOL,EAAKsF,aACjB,8BAAOb,KAGf,uBAAKM,KAAM,GAAIC,MAAO,CAAEC,cAAe,KACnC,yBAAKM,UAAU,WAAWP,MAAO,CAAEQ,WAAYnB,IAC3C,uBAAQ0D,YAAU,EAACC,YAAU,EAACC,gBAAgB,2BAAOrC,YAAY,qBAAMZ,MAAO,CAAEF,MAAO,QAEnF1F,MAAQsB,EAAI1C,GAA2BoB,MACvCyG,SAAU,SAACzG,GAAD,OA1BtC,SAA0BA,EAAepB,GACrC+F,EAAS,CAAEzC,KAAM,YAAakD,QAAS,CAAExG,MAAKmC,KAAMwD,EAAMxD,KAAMf,WAyBX8I,CAAiB9I,EAAOpB,KAE3B,kBAAfsJ,EAAQ,GACTA,EAAQvH,KAAI,SAACF,GAAD,OAAe,sBAAQsI,OAAR,CAAenK,IAAK6B,EAAGT,MAAOS,GAAIA,MAC7DyH,EAAQvH,KAAI,SAACF,GAAD,OAAgB,sBAAQsI,OAAR,CAAenK,IAAK6B,EAAE0H,GAAInI,MAAOS,EAAE0H,IAAK1H,EAAE0H,GAA1C,SAA+C1H,EAAEqC,KAAjD,iBAQ9D,GAAkB,WAAdlC,EAAKsB,KAAmB,CACxB,IAAM8G,EAAW1H,EAAuB1C,GACxC,OACI,kBAAC,IAAMsI,SAAP,CAAgBtI,IAAKA,GACjB,uBAAK+G,KAAM,IACP,kBAAC,EAAD,CACIO,YAAatF,EAAKsF,YAClBlG,MAAOgJ,EACPX,iBAAkBA,EAClBC,eAAgBA,EAChBjD,MAAOA,EACPxF,IAAKmJ,EAAQnJ,IAAMmJ,EAAQnJ,IAAM0I,EACjCxH,KAAI,sBAAMwD,EAAMxD,MAAZ,CAAkBnC,QAK1C,GAAkB,WAAdgC,EAAKsB,KACL,OACI,kBAAC,IAAMgF,SAAP,CAAgBtI,IAAKA,GACjB,uBAAKgH,MAAO,CAAEI,UAAW,MAAOC,QAAS,mBAAqBN,KAAM,GAChE,uBAAS1E,MAAOL,EAAKsF,aACjB,8BAAOb,KAGf,uBAAKM,KAAM,GAAIC,MAAO,CAAEC,cAAe,KACnC,yBAAKM,UAAU,WAAWP,MAAO,CAAEQ,WAAYnB,IAC3C,uBACIW,MAAO,CAAEF,MAAO,QAChBkB,SAAUhG,EAAKgG,SACf5G,MAAQsB,EAAI1C,GAA2BoB,MACvCyG,SAAU,SAAArH,GAAC,OA9EvC,SAAyBY,EAAepB,GACpC+F,EAAS,CAAEzC,KAAM,YAAakD,QAAS,CAAExG,MAAKmC,KAAMwD,EAAMxD,KAAMf,WA6EzBmF,CAAgB/F,EAAEsH,OAAO1G,MAAOpB,IAC/C4H,YAAY,0BAMpC,GAAkB,SAAd5F,EAAKsB,KAAiB,CACtB,IAAI+G,GN7Ka/G,EM6KYtB,EAAK6B,QN5KnC,CAAC,OAAQ,MAAO,OAAQ,SAAU,QAAS,SAAU,OAAQ,QAAS,SAAU,QAAQN,SAASD,GM6KzFZ,EAAI1C,GAA6BoB,OAKxC,OAHIY,EAAK+B,UAAYsG,EAAU3J,SAAWsB,EAAK+B,WAC3CsG,EAAYlK,MAAM2D,KAAK,CAAEpD,OAAQsB,EAAK+B,WAAY,iBAAM,OAGxD,kBAAC,IAAMuE,SAAP,CAAgBtI,IAAKA,GACjB,uBAAK+G,KAAM,IACP,kBAACrB,EAAD,CAAM4B,YAAatF,EAAKsF,YAAanG,MAAOa,EAAK+B,SAAU3C,MAAOiJ,EAAWxG,QAAS1D,MAAMC,QAAQ4B,EAAK6B,SAAW7B,EAAK6B,QAAQ,GAAK7B,EAAK6B,QAAU4C,MAAOA,EAAOtE,KAAMwD,EAAMxD,SAK/L,MAAkB,SAAdH,EAAKsB,KAED,kBAAC,IAAMgF,SAAP,CAAgBtI,IAAKA,GACjB,uBAAKgH,MAAO,CAAEI,UAAW,MAAOC,QAAS,mBAAqBN,KAAM,GAChE,uBAAS1E,MAAOL,EAAKsF,aACjB,8BAAOb,KAGf,uBAAKM,KAAM,GAAIC,MAAO,CAAEC,cAAe,KACnC,yBAAKM,UAAU,WAAWP,MAAO,CAAEQ,WAAYnB,IAC3C,uBAAQiE,QAAU5H,EAAI1C,GAA4BoB,MAAOyG,SAAU,SAAArH,GAAC,OAxG5F,SAA0BY,EAAgBpB,GACtC+F,EAAS,CAAEzC,KAAM,YAAakD,QAAS,CAAExG,MAAKmC,KAAMwD,EAAMxD,KAAMf,WAuG4BmJ,CAAiB/J,EAAGR,SAO5G,kBAAC,IAAMsI,SAAP,CAAgBtI,IAAKA,GACjB,uBAAKgH,MAAO,CAAEI,UAAW,MAAOC,QAAS,mBAAqBN,KAAM,GAChE,uBAAS1E,MAAOL,EAAKsF,aACjB,8BAAOb,KAGf,uBAAKM,KAAM,GAAIC,MAAO,CAAEC,cAAe,KACnC,yBAAKM,UAAU,WAAWP,MAAO,CAAEQ,WAAYnB,IAC3C,uBACIW,MAAO,CAAEF,MAAO,QAChBkB,SAAUhG,EAAKgG,SACf5G,MAAQsB,EAAI1C,GAA2BoB,MACvCyG,SAAU,SAAArH,GAAC,OA9HnC,SAA+BY,EAAYpB,GACvC+F,EAAS,CAAEzC,KAAM,YAAakD,QAAS,CAAExG,MAAKmC,KAAMwD,EAAMxD,KAAMf,WA6H7BoJ,CAAsBhK,EAAGR,IACxC4H,YAAY,0BA6BpC,SAAS6C,EAAgBjK,GACrBuF,EAAS,CAAEzC,KAAM,YAAakD,QAAS,CAAErE,KAAMwD,EAAMxD,KAAMlB,IAAKT,EAAEsH,OAAO1G,SA0B7E,IACMsJ,EAAM,CADOvE,EAAI,UArOT,eAqOS,uBArOT,+BAsOWR,EAAM4B,WAC/B,OACI,uBAAKA,UAAWmD,EAAI5F,KAAK,MACrB,uBAAKiC,KAAM,IACP,2BACI,uBAAKG,aA/CrB,SAAoB1G,GAChBA,EAAEoG,kBACFR,GAAQ,kBAAM,MA6C6Be,aA3C/C,SAAkB3G,GACd4F,GAAQ,kBAAM,MA0CqDW,KAAM,EAAGC,MAAO,CAAEI,UAAW,QAASC,QAAS,oBAClG,uBAAShF,MAAOsD,EAAM2B,aAClB,8BAAO3B,EAAMc,SAGrB,uBAAKM,KAAM,GAAIC,MAAO,CAAEC,cAAe,KACnC,yBAAKM,UAAU,WAAWP,MAAO,CAAEQ,WAAYnB,EC7RzC,ID6RyE,EAAIA,EC7R7E,GD6R4G,IAC9G,sBAAOoB,MAAP,CAAaC,SAAO,KAEVuB,EAAWvI,QACT,uBACIsJ,YAAU,EACVpC,YAAY,qBACZqC,gBAAgB,2BAChB7I,MAAO6H,EAAWtD,EAAMvE,MAAMG,OAAOgI,GACrC1B,SA7CxC,SAAqBzG,GACjB,IAAMG,EAAQ0H,EAAW0B,WAAU,SAAA3I,GAAI,OAAIA,EAAKuH,KAAOnI,KACvD2E,EAAS,CAAEzC,KAAM,cAAekD,QAAS,CAAErE,KAAMwD,EAAMxD,KAAMZ,YA4CzByF,MAAO,CAAEF,MAAO,QAEZmC,EAAWlH,KAAI,SAAAC,GAAI,OAAI,sBAAQmI,OAAR,CAAenK,IAAKgC,EAAKuH,GAAInI,MAAOY,EAAKuH,IAAKvH,EAAKkC,UAK1F,uBACI8F,YAAU,EACVY,KAAK,WACLC,YAAa,EACbjD,YAAY,qBACZqC,gBAAgB,2BAChBjD,MAAO,CAAEF,MAAOmC,EAAWvI,OAAS,MAAQ,QAC5CmH,SAtOhC,SAAgBzG,GACPA,EAAMV,QACPqF,EAAS,CAAEzC,KAAM,QAASkD,QAAS,CAAErE,KAAMwD,EAAMxD,SAqOzBf,MAAOuE,EAAMvE,MAAMuB,IACnBmI,WA3OhC,SAAwB9K,GACpB+F,EAAS,CAAEzC,KAAM,SAAUkD,QAAS,CAAErE,KAAMwD,EAAMxD,KAAMnC,UA2O5B+K,eA3DhC,SAAwBC,GACpB,OACI,6BAEQrF,EAAM8D,iBAEE,yBAAKzC,MAAO,CAAEK,QAAS,UACnB,sBAAY4D,KAAZ,CAAiBjE,MAAO,CAAEyB,aAAc,IAAMnF,KAAK,aAAnD,gBACA,sBAAOmE,MAAP,CAAaI,SAAU4C,EAAiBS,aAAcvF,EAAM+D,gBACtD/D,EAAM8D,iBAAiB1H,KAAI,SAAAC,GAAI,OAAI,uBAAOhC,IAAKgC,EAAKuH,GAAInI,MAAOY,EAAKuH,IAAKvH,EAAKkC,UAEpF,uBAAS8C,MAAO,CAAEmE,OAAQ,YAGhC,KAETH,IA4CmBI,kBAAmB,SAACjH,GAAD,4BAAeA,EAAKzD,OAApB,uBAA+BqI,EAAWrI,OAA1C,WACnB2K,SAlPhC,SAAsBrL,GAClBkG,GAAW,kBAAM,KACjBH,EAAS,CAAEzC,KAAM,MAAOkD,QAAS,CAAErE,KAAMwD,EAAMxD,KAAMnC,WAkPrB+I,EAAWhH,KAAI,SAACC,GAAD,OAAmB,sBAAQmI,OAAR,CAAenK,IAAKgC,EAAKuH,GAAInI,MAAOY,EAAKuH,IAAKvH,EAAKkC,aAMzG,uBAAK6C,KAAM,GACP,kBAAC,IAAD,CAAaC,MAAO,CAAEQ,WAAY,KAC9B,uBAAQlE,KAAK,QAAQ2E,QAAS,kBAAM/B,GAAW,SAAArE,GAAC,OAAKA,MAAIQ,MAAM,6BAAU4D,EAAU,kBAACmC,EAAA,EAAD,MAAiB,kBAACC,EAAA,EAAD,OACpG,uBAAQ/E,KAAK,QAAQ2E,QAtF7C,WACI,IAAM9D,EAAO1C,EAAQ6J,QAAQxF,EAAM/C,OAAQ4C,EAAMxD,MACjDoJ,QAAQC,IAAIrH,EAAK5B,UACjB,IAAMkJ,EAAOC,KAAKC,UAAUxH,EAAKjC,aAAc,KAAM,GACrD0J,IAAKH,GACLI,EAAA,EAAQC,QAAQ,+CAiF0CzJ,MAAM,gBAAK,kBAAC0J,EAAA,EAAD,OAChDpG,EAAMiD,SAKrB3C,EA5GV,SAAqBjE,GACjB,GAAIA,EAAM,CAAC,IACCf,EAAae,EAAbf,IAAKyB,EAAQV,EAARU,IACb,OAAOA,EACD8B,OAAOC,KAAK/B,GAAKX,KAAI,SAAA/B,GAAG,OAAI6I,EAAS5H,EAAKyB,EAAK1C,EAAKgC,EAAKT,UACzD,GAEV,MAAO,GAqGSyK,CAAWrG,EAAMvE,OAAS,M,IE9S7B6K,E,WAGjB,aAAwC,IAA5B9H,EAA2B,uDAAJ,GAAI,yBAF/B2B,MAAwB,GAG5BzE,KAAKyE,MAAQ3B,EACb9C,KAAK1B,MAAMwE,G,uDAGK,IAAD,OACfK,OAAOC,KAAKpD,KAAKyE,OAAOhG,SAAQ,SAAAE,GAC5B,IAAMgC,EAAO,EAAK8D,MAAM9F,GACxB,GAAIgC,EAAKhC,IAAK,CACV,IAAM0C,EAAMV,EAAKU,IACjB8B,OAAOC,KAAK/B,GAAK5C,SAAQ,SAAAoD,GAAM,IAAD,EACP,eAAegJ,KAAKhJ,IAAM,GAApCiJ,EADiB,oBAE1B,GAAIA,EAAQ,CACR,IAAMlL,EAAMyB,EAAIQ,GACClB,EAAKhC,IAAImM,GACjBxK,QAAO,SAACC,EAAGsB,GAEhB,OADAtB,EAAE,GAAD,OAAIsB,EAAJ,YAASiJ,IAAYlL,EACfW,IACRc,UACIA,EAAIQ,a,4BAOlBiB,GAAuB,IAAD,OAC/BxE,EAAM0B,KAAKyE,MAAO3B,GAClBK,OAAOC,KAAKN,GAAMxC,QACd,SAACC,EAAGsB,GAEA,OADAtB,EAAEsB,GAAK,EAAKkJ,MAAMlJ,GACXtB,IAEXP,KAAKyE,OAETzE,KAAKgL,a,4BAGKnI,GAAgD,IAAD,OAAjCtE,EAAiC,uDAAxB,GAAI+C,EAAoB,uDAAJ,GACrD,GAAIA,EAAIY,SAASW,GACb,MAAO,GAEX,IAAMoI,EAAOjL,KAAKyE,MAAM5B,GACxB,OAAKoI,GAGL3J,EAAInB,KAAK0C,GACLoI,EAAKC,MACLD,EAAKC,KAAKzM,SAAQ,SAAA+B,GAAC,OAAIlC,EAAMC,EAAQ,EAAKwM,MAAMvK,EAAGjC,EAAQ+C,OAE/DhD,EAAMC,EAAQ0M,GACP1M,GAPI,K,qCAUkB,IAAD,OAC5B,OAAO4E,OAAOC,KAAKpD,KAAKyE,OAAO0G,QAAO,SAACtJ,GAAD,OAAO,EAAK4C,MAAM5C,GAAGuJ,U,yCAKrCvI,EAAc3C,GAAuC,IAAD,EAEvB,EAD7CmB,EAAG,UAAGrB,KAAKyE,MAAM5B,UAAd,aAAG,EAAkBxB,IAC9B,OAAIgK,OAAOC,UAAUpL,IAAUpB,MAAMC,QAAQsC,GACzC,UAAOrB,KAAKyE,MAAMpD,GAAMnB,EAAYA,EAAJ,WAAhC,aAAO,EAAsCmB,IAE1CA,I,yCAGewB,GACtB,OAAO7C,KAAKyE,MAAM5B,K,iCAIlB,OAAO7C,KAAKyE,U,KC9Ed8G,G,OAAuB,CACzB7J,OAAQ,KACR8J,QAAS,GACTxD,UAAW,IAAI4C,EACfrC,KAAM,GACNtD,OAAQ,IAGCT,EAAaiH,IAAMC,cAAwB,MAExD,SAASC,EAAQC,EAAeC,GAAkB,IACtC5J,EAAkB4J,EAAlB5J,KAAMkD,EAAY0G,EAAZ1G,QACd,GAAa,aAATlD,EAAqB,CAAC,IACd+F,EAAoB7C,EAApB6C,UAAWO,EAASpD,EAAToD,KAEnB,OADAqD,EAAM5D,UAAU1J,MAAM0J,GACf,2BAAK4D,GAAZ,IAAmBrD,SAEvB,GAAa,WAATtG,EAAmB,CACnB,IAAMP,EAAS,IAAItB,EAAQ+E,EAASyG,EAAM5D,WAC1C,OAAO,2BAAK4D,GAAZ,IAAmBlK,SAAQ8J,QAAS9J,EAAOd,WAE/C,GAAa,kBAATqB,EACA,OAAO,2BAAK2J,GAAZ,IAAmBJ,QAASI,EAAMlK,OAAOd,WAE7C,GAAa,cAATqB,EAAsB,CAAC,IACfnB,EAA4BqE,EAA5BrE,KAAMnC,EAAsBwG,EAAtBxG,IAAKoB,EAAiBoF,EAAjBpF,MAAOG,EAAUiF,EAAVjF,MAG1B,OAFaE,EAAQ6J,QAAQ2B,EAAMlK,OAAQZ,GACtCgL,OAAOnN,EAAKoB,EAAOG,GACjB,2BAAK0L,GAAZ,IAAmBlK,OAAQkK,EAAMlK,OAAQ8J,QAASI,EAAMlK,OAAOd,WAEnE,GAAa,QAATqB,EAAgB,CAAC,IACTnB,EAAcqE,EAAdrE,KAAMnC,EAAQwG,EAARxG,IAGd,OAFayB,EAAQ6J,QAAQ2B,EAAMlK,OAAQZ,GACtCb,IAAItB,GACF,2BAAKiN,GAAZ,IAAmBlK,OAAQkK,EAAMlK,OAAQ8J,QAASI,EAAMlK,OAAOd,WAEnE,GAAa,WAATqB,EAAmB,CAAC,IACZnB,EAAcqE,EAAdrE,KAAMnC,EAAQwG,EAARxG,IAGd,OAFayB,EAAQ6J,QAAQ2B,EAAMlK,OAAQZ,GACtCuE,OAAO1G,GACL,2BAAKiN,GAAZ,IAAmBlK,OAAQkK,EAAMlK,OAAQ8J,QAASI,EAAMlK,OAAOd,WAEnE,GAAa,UAATqB,EAAkB,CAAC,IACXnB,EAASqE,EAATrE,KAGR,OAFaV,EAAQ6J,QAAQ2B,EAAMlK,OAAQZ,GACtCsB,QACE,2BAAKwJ,GAAZ,IAAmBlK,OAAQkK,EAAMlK,OAAQ8J,QAASI,EAAMlK,OAAOd,WAEnE,GAAa,cAATqB,EAAsB,CAAC,IACfrC,EAAcuF,EAAdvF,IAAKkB,EAASqE,EAATrE,KAGb,OAFaV,EAAQ6J,QAAQ2B,EAAMlK,OAAQZ,GACtCiL,OAAOnM,GACL,2BAAKgM,GAAZ,IAAmBlK,OAAQkK,EAAMlK,OAAQ8J,QAASI,EAAMlK,OAAOd,WAEnE,GAAa,gBAATqB,EAAwB,CAAC,IACjB/B,EAAgBiF,EAAhBjF,MAAOY,EAASqE,EAATrE,KAGf,OAFaV,EAAQ6J,QAAQ2B,EAAMlK,OAAQZ,GACtCkL,SAAS9L,GACP,2BAAK0L,GAAZ,IAAmBlK,OAAQkK,EAAMlK,OAAQ8J,QAASI,EAAMlK,OAAOd,WAEnE,GAAa,gBAATqB,EAAwB,CAAC,IACjBnB,EAAcqE,EAAdrE,KAAMnC,EAAQwG,EAARxG,IACRgC,EAAOP,EAAQ6J,QAAQ2B,EAAMlK,OAAQZ,GACrCO,EAAMV,EAAKsL,OAAOtN,GAMxB,OALI0C,aAAe1B,EACf0B,EAAIe,QAEJzB,EAAKmL,OAAOnN,EAAK,QAAI0D,GAElB,2BAAKuJ,GAAZ,IAAmBlK,OAAQkK,EAAMlK,OAAQ8J,QAASI,EAAMlK,OAAOd,WAEnE,GAAa,iBAATqB,EAAyB,CAAC,IAClBnB,EAAqBqE,EAArBrE,KAAMZ,EAAeiF,EAAfjF,MAAOvB,EAAQwG,EAARxG,IAGrB,OAFYyB,EAAQ6J,QAAQ2B,EAAMlK,OAAQZ,GAAMmL,OAAOtN,GAAKoB,MACxDM,OAAOH,EAAO,GACX,2BAAK0L,GAAZ,IAAmBlK,OAAQkK,EAAMlK,OAAQ8J,QAASI,EAAMlK,OAAOd,WAEnE,GAAa,cAATqB,EAAsB,CAAC,IACfnB,EAAcqE,EAAdrE,KAAMnC,EAAQwG,EAARxG,IACRgC,EAAOP,EAAQ6J,QAAQ2B,EAAMlK,OAAQZ,GAAMmL,OAAOtN,GAMxD,OALIgC,aAAgBhB,EAChBgB,EAAKV,MAELU,EAAKZ,MAAMI,KAAK,IAEb,2BAAKyL,GAAZ,IAAmBlK,OAAQkK,EAAMlK,OAAQ8J,QAASI,EAAMlK,OAAOd,WAEnE,GAAa,cAATqB,EAAsB,CACtB,IAAMgD,EAASE,EACf,OAAO,2BAAKyG,GAAZ,IAAmB3G,WAEvB,OAAO2G,EAEI,iBAAY,IAAD,EACIM,qBAAWP,EAASJ,GADxB,mBACf9G,EADe,KACRC,EADQ,OAEUC,mBAAS,IAFnB,mBAEfwH,EAFe,KAELC,EAFK,OAGYzH,mBAAS,IAHrB,mBAGf0H,EAHe,KAGJC,EAHI,KA8BtB,SAASC,EAASC,GACd9H,EAAS,CAAEzC,KAAM,SAAUkD,QAASqH,IASxC,OAnCA1E,qBAAU,WACN2E,MAAM,gBAAgBC,MAAK,SAAAC,GAAG,OAAIA,EAAIvC,UAAQsC,MAAK,SAAAC,GAC/CjI,EAAS,CAAEzC,KAAM,WAAYkD,QAAS,CAAE6C,UAAW2E,EAAKpE,KAAM,MAC9D+D,GAAa,WACT,IAAMM,EAAQnI,EAAMuD,UAAU6E,eAE9B,OADAN,EAASK,EAAM,IACRA,QAGfE,EAAA,EAAarC,QAAQ,CACjBsC,SAAU,KACVvC,QAAS,mBACTvE,YAAa,6FAElB,IAEH6B,qBACI,WACQrD,EAAM/C,QACN0K,GAAY,kBAAM3H,EAAM/C,OAAOR,cAGvC,CAACuD,EAAM+G,UAcP,yBAAKtF,UAAU,OACX,kBAAC1B,EAAWwI,SAAZ,CAAqBjN,MAAO,CAAE0E,QAAOC,aACjC,yBAAKwB,UAAU,YAAYP,MAAO,CAAE0B,WAAY,KAC5C,uBAAMT,QARtB,aAQ0CqG,kBAAgB,EAACd,SAAUA,EAAUe,UAAQ,KAE3E,yBAAKhH,UAAU,cACX,yBAAKA,UAAU,aACX,yBAAKP,MAAO,CAAEwH,OAAQ,GAAI9F,WAAY,IAClC,uBAAQ+F,gBAAgB,SAAIC,kBAAkB,SAAI1H,MAAO,CAAEQ,WAAY,GAAIhC,MAAO,QAAS4B,UAAW,SAAWS,SAhBzI,WACI9B,EAAS,CAAEzC,KAAM,YAAakD,QAAWV,EAAMQ,OAAS,EF1JlC,QE2KEoH,EAAUhN,OAAS,GAAKgN,EAAU3L,KAAI,SAAAC,GAAI,aAAI,uBAAK2G,OAAO,UAAA7C,EAAM/C,cAAN,eAAc4L,YAAa3M,EAAO,aAAe,UAAWhC,IAAKgC,EAAMiG,QAAS,kBAAM2F,EAAS5L,KAAQA,OAIrK8D,EAAM/C,QACF,kBAAC,EAAD,CACIwE,UAAU,OACVD,YAAa,GACbb,MAAOX,EAAM+G,QAAQ5L,IACrBA,IAAK6E,EAAM+G,QAAQ5L,IACnBG,MAAO0E,EAAM+G,QACb1K,KAAM,UCjL3B,G,OAAA,WACX,OACI,kBAAC,EAAD,Q,OCFRyM,IAASC,OACP,yBAAKtH,UAAU,QACT,yDAEI,wFACA,yBAAKA,UAAU,SACX,uBAAGuH,KAAK,sCAAsChH,OAAO,UAArD,UACA,uBAAGgH,KAAK,yCAAyChH,OAAO,UAAxD,gBACA,uBAAGgH,KAAK,qCAAqChH,OAAO,UAApD,4BACA,uBAAGgH,KAAK,4CAA4ChH,OAAO,UAA3D,+BAIR,yBAAKP,UAAU,QACX,kBAAC,EAAD,QAIVwH,SAASC,eAAe,W","file":"static/js/main.d18371b8.chunk.js","sourcesContent":["export function isSimpleType(type: string) {\r\n    return ['byte', 'int', 'bool', 'number', 'short', 'double', 'long', 'float', 'string', 'enum'].includes(type)\r\n}\r\n\r\nexport function parseNbtType(rawText: string) {\r\n    const result = /^([a-zA-Z0-9-_#]+)(\\[\\s*(\\d*)\\s*\\])?$/.exec(rawText) as RegExpExecArray\r\n    const [, type, subtype, count] = result\r\n    if (subtype) {\r\n        return {\r\n            type: 'list',\r\n            subtype: type,\r\n            count: count === '' ? undefined : +count\r\n        }\r\n    }\r\n    return {\r\n        type,\r\n    }\r\n}\r\n\r\nexport function merge(result: any = {}, ...args: any[]) {\r\n    args.forEach((object) => {\r\n        for (const key in object) {\r\n            if (object.hasOwnProperty(key)) {\r\n                const emt = object[key];\r\n                result[key] = typeof emt !== 'object' || Array.isArray(emt)\r\n                    ? emt\r\n                    : merge(result[key], emt)\r\n            }\r\n        }\r\n    })\r\n    return result\r\n}\r\n  \r\nexport function trimStart(raw: string, char=''): string {\r\n    let e = char == null || char === '' ? 's' : char\r\n    let reg = new RegExp(`^${e}*`)\r\n    return raw.replace(reg, '')\r\n}\r\n\r\nexport function trimEnd(raw: string, char=''): string {\r\n    let e = char == null || char === '' ? 's' : char\r\n    let i = raw.length\r\n    let reg = new RegExp(e)\r\n    while(reg.test(raw.charAt(--i))) {}\r\n    return raw.substr(0, i + 1)\r\n}\r\n\r\nexport function trim(raw: string, char=''): string {\r\n    return trimEnd(trimStart(raw, char), char)\r\n}","import NbtItem from \"./NbtItem\";\r\nimport { trimEnd } from \"../../util\";\r\nimport NbtStore from \"../parse/config/NbtStore\";\r\n\r\nexport default class NbtArrayItem {\r\n    private value: NbtItem[] = [];\r\n    private nbtStore: NbtStore;\r\n    private tpl: string = '';\r\n\r\n    constructor(tpl: string, nbtStore: NbtStore, count = 0) {\r\n        this.tpl = tpl\r\n        this.nbtStore = nbtStore\r\n        while(count--) {\r\n            this.add()\r\n        }\r\n    }\r\n    \r\n    public get(index: number) {\r\n        return this.value[index]\r\n    }\r\n\r\n    public add() {\r\n        this.value.push(new NbtItem(this.tpl, this.nbtStore))\r\n    }\r\n\r\n    public remove(index: number) {\r\n        this.value.splice(index, 1)\r\n    }\r\n\r\n    public clear() {\r\n        this.value = []\r\n    }\r\n\r\n    public toString() {\r\n        const result = this.value.reduce((s, v) => {\r\n            s += v.toString() + ','\r\n            return s\r\n        }, '')\r\n        return `[${trimEnd(result, ',')}]`\r\n    }\r\n\r\n    public toJson(): any {\r\n        return {\r\n            tpl: this.tpl,\r\n            value: this.value.map(item => item.toJson())\r\n        }\r\n    }\r\n\r\n    public toPureJson(): any {\r\n        return this.value.map(item => item.toPureJson())\r\n    }\r\n\r\n    public toTree(path: string[] = []): any {\r\n        return this.value.map((item, index) => {\r\n            const newPath = [...path, index + '']\r\n            return {\r\n                title: `${path[path.length - 1]}-${index}`,\r\n                key: newPath,\r\n                children: item.toTree(newPath),\r\n            }\r\n        })\r\n    }\r\n}","export const mapSuffix: { [name: string]: string } = {\r\n  'bool': 'b',\r\n  'byte': 'b',\r\n  'short': 's',\r\n  'long': 'l',\r\n  'float': 'f',\r\n  'double': 'd',\r\n  'int': '',\r\n  'string': '',\r\n  'enum': '',\r\n}\r\n\r\nexport const mapPrefix: { [name: string]: string } = {\r\n  'Modifiers.Name': 'generic.',\r\n  'id': 'minecraft:'\r\n}\r\n\r\nexport const mapListNum: string[] = [\r\n  'HandDropChances',\r\n  'ArmorDropChances',\r\n  'Pos',\r\n  'Motion',\r\n  'Rotation',\r\n  'UUID',\r\n  'Owner',\r\n  'direction',\r\n  'power',\r\n  'ItemRotation',\r\n]\r\n\r\nexport const mapList: string[] = [\r\n  'Lore',\r\n  'CanPlaceOn',\r\n  'CanDestroy',\r\n]\r\n\r\nexport const mapCompound: string[] = [\r\n  'ActiveEffects',\r\n  'HandItems',\r\n  'ArmorItems',\r\n  'Modifiers',\r\n  'Attributes',\r\n  'Leash',\r\n  'Enchantments',\r\n  'Passengers',\r\n  'Effects',\r\n  'Items',\r\n  'SpawnPotentials',\r\n]\r\n\r\nexport const mapComposition: string[] = [\r\n  'tag',\r\n  'display',\r\n  'Brain',\r\n  'BeamTarget',\r\n  'Item',\r\n  'TileEntityData',\r\n  'BlockState',\r\n  'FireworksItem',\r\n  'DisplayState',\r\n  'SpawnData',\r\n]","import { NbtNumberType } from './../../util/interface';\r\nimport { NbtProps } from './../parse/config/NbtStore';\r\nimport NbtArrayItem from \"./NbtArrayItem\";\r\nimport NbtStore from \"../parse/config/NbtStore\";\r\nimport { GObject } from '../../util/interface';\r\nimport { mapSuffix } from '../stringify/map';\r\nimport { trimEnd } from '../../util';\r\n\r\nexport type pathItem = string | [string, number]\r\nexport type NbtType = NbtItem | NbtArrayItem;\r\nexport interface INbtRoot {\r\n    path: pathItem[],\r\n    root: GObject<NbtItem>,\r\n}\r\n\r\nexport default class NbtItem {\r\n    private nbt: any = {};\r\n    private tpl: string = '';\r\n    private dynamic: boolean;\r\n    private nbtStore: NbtStore;\r\n    private has: string[] = [];\r\n    private actIndex = -1\r\n\r\n    public static getItem(actNbt: NbtItem, path: pathItem[]): NbtItem {\r\n        if (!actNbt) return;\r\n        if (!path.length) return actNbt\r\n        let obj: NbtItem;\r\n        path.reduce(\r\n            (s: NbtItem, p: pathItem) => {\r\n                const nbt = s.nbt\r\n                if (Array.isArray(p)) {\r\n                    const [k, i] = p;\r\n                    const node = nbt[k] as NbtArrayItem;\r\n                    const one = node.get(i)\r\n                    obj = one;\r\n                    return one;\r\n                } else {\r\n                    const node = nbt[p] as NbtItem;\r\n                    obj = node;\r\n                    return node;\r\n                }\r\n            },\r\n            actNbt\r\n        )\r\n        return obj;\r\n    }\r\n\r\n    public static isSimpleType(type: string) {\r\n        return ['byte', 'int', 'number', 'bool', 'short', 'double', 'long', 'float', 'string', 'enum'].includes(type)\r\n    }\r\n\r\n    constructor(tpl: string, nbtStore: NbtStore, dynamic = false) {\r\n        this.tpl = tpl\r\n        this.nbtStore = nbtStore\r\n        this.dynamic = dynamic\r\n        this.initActIndex()\r\n        this.initItems(this, tpl)\r\n    }\r\n\r\n    private initActIndex() {\r\n        const nbt = this.nbtStore.getComponentByName(this.tpl).nbt\r\n        if (Array.isArray(nbt)) {\r\n            this.actIndex = 0\r\n            this.initItems(this, nbt[0])\r\n        }\r\n    }\r\n\r\n    public getTpl() {\r\n        return this.tpl\r\n    }\r\n\r\n    public setTpl(tpl: string) {\r\n        this.tpl = tpl\r\n        this.clear()\r\n        this.initItems(this, tpl)\r\n    }\r\n\r\n    public setIndex(index: number) {\r\n        this.actIndex = index\r\n        this.clear()\r\n        const nbt = this.nbtStore.getComponentByName(this.tpl).nbt as string[]\r\n        this.initItems(this, nbt[index])\r\n    }\r\n\r\n    public getNbt(key: string) {\r\n        return this.nbt[key]\r\n    }\r\n    \r\n    public setNbt(key: string, value: any, index: number) {\r\n        if (index === undefined) {\r\n            this.nbt[key].value = value\r\n        } else {\r\n            this.nbt[key].value[index] = value\r\n        }\r\n    }\r\n\r\n    private addAttr(key: string, obj: NbtProps) {\r\n        if (this.has.includes(key)) {\r\n            return\r\n        }\r\n        if (NbtItem.isSimpleType(obj.type)) {\r\n            this.nbt[key] = {\r\n                value: obj.default,\r\n                type: obj.type,\r\n            }\r\n        } else {\r\n            if (obj.type === 'list') {\r\n                if (typeof obj.subtype === 'string') {\r\n                    if (NbtItem.isSimpleType(obj.subtype)) {\r\n                        this.nbt[key] = {\r\n                            value: Array.from({ length: obj.minItems }).fill(''),\r\n                            type: 'list',\r\n                            subtype: obj.subtype,\r\n                        }\r\n                    } else {\r\n                        this.nbt[key] = new NbtArrayItem(obj.subtype, this.nbtStore, obj.minItems)\r\n                    }\r\n                }\r\n            } else {\r\n                const tpl = Array.isArray(obj.subtype) ? obj.subtype[0] : obj.subtype\r\n                const nbtItem = new NbtItem(tpl, this.nbtStore, !!tpl)\r\n                this.initItems(nbtItem, tpl)\r\n                this.nbt[key] = nbtItem\r\n            }\r\n        }\r\n        this.has.push(key)\r\n    }\r\n\r\n    private initItems(nbtItem: NbtItem, tpl: string) {\r\n        const { has } = this.nbtStore.getComponentByName(tpl)\r\n        if (has) {\r\n            if (Array.isArray(has)) {\r\n                has.forEach(key => nbtItem.add(key))\r\n            } else {\r\n                nbtItem.add()\r\n            }\r\n        }\r\n    }\r\n\r\n    public add(name?: string) {\r\n        const data = this.nbtStore.getNbtObjectByName(this.tpl, this.actIndex)\r\n        if (!name) {\r\n            Object.keys(data).map(key => this.addAttr(key, data[key]))\r\n            return\r\n        }\r\n        const { link } = data[name]\r\n        if (link?.length) {\r\n            this.triggerHandle(data, link, (key, item) => this.addAttr(key, item))\r\n        } else {\r\n            this.addAttr(name, data[name])\r\n        }\r\n    }\r\n\r\n    public remove(name: string) {\r\n        const data = this.nbtStore.getNbtObjectByName(this.tpl, this.actIndex)\r\n        const { link } = data[name]\r\n        if (link?.length) {\r\n            this.triggerHandle(data, link, (key: string) => this.removeHandle(key))\r\n        } else {\r\n            this.removeHandle(name)\r\n        }\r\n    }\r\n\r\n    private removeHandle(key: string) {\r\n        delete this.nbt[key]\r\n        this.has.splice(this.has.indexOf(key), 1)\r\n    }\r\n\r\n    private triggerHandle(data: GObject<NbtProps>, link: string[], handle: (key: string, props: NbtProps) => void) {\r\n        Object.keys(data).forEach(key => {\r\n            if (link.includes(data[key].linkType)) {\r\n                handle(key, data[key])\r\n            }\r\n        })\r\n    }\r\n\r\n    public clear() {\r\n        this.has = []\r\n        this.nbt = {}\r\n    }\r\n\r\n    public toString() {\r\n        const result = Object.keys(this.nbt).reduce((s, k) => {\r\n            const item = this.nbt[k];\r\n            if (item instanceof NbtArrayItem || item instanceof NbtItem) {\r\n                s += `${k}:${item.toString()},`\r\n            } else if (item.type === 'list') {\r\n                if (item.subtype === 'string') {\r\n                    s += `${k}:[\"${item.value.join('\",\"')}\"],`\r\n                } else {\r\n                    s += `${k}:[${item.value.map((e: any) => (e ? e : 0) + mapSuffix[item.subtype]).join(',')}],`\r\n                }\r\n            } else {\r\n                if (item.type === 'bool') {\r\n                    s += `${k}:${+item.value}b,`\r\n                } else if (item.type === 'string') {\r\n                    s += `${k}:${item.value ? item.value : '\"\"'},`\r\n                } else if (item.type === 'enum') {\r\n                    s += `${k}:\"${item.value === undefined ? \"\" : item.value}\",`\r\n                } else {\r\n                    s += `${k}:${item.value === '' ? 0 : item.value}${mapSuffix[item.type]},`\r\n                }\r\n            }\r\n            return s\r\n        }, '')\r\n        return `{${trimEnd(result, ',')}}`\r\n    }\r\n\r\n    public toJson(): any {\r\n        return {\r\n            tpl: this.tpl,\r\n            has: [...this.has],\r\n            index: this.actIndex,\r\n            dynamic: this.dynamic,\r\n            nbt: Object.keys(this.nbt).reduce((obj: any, key) => {\r\n                const item = this.nbt[key]\r\n                obj[key] = item instanceof NbtItem\r\n                    ? item.toJson()\r\n                    : item instanceof NbtArrayItem \r\n                        ? item.toJson()\r\n                        : { value: item.value }\r\n                \r\n                if (item.dynamic) {\r\n                    obj[key].tpl = item.tpl\r\n                }\r\n                return obj\r\n            }, {})\r\n        }\r\n    }\r\n\r\n    public toPureJson(): any {\r\n        return Object.keys(this.nbt).reduce((obj: any, key) => {\r\n            const item = this.nbt[key]\r\n                obj[key] = item instanceof NbtItem\r\n                    ? item.toPureJson()\r\n                    : item instanceof NbtArrayItem \r\n                        ? item.toPureJson()\r\n                        : item.value\r\n            return obj\r\n        }, {})\r\n    }\r\n    \r\n    public toTree(path: string[] = []): any {\r\n        return Object.keys(this.nbt).map((key: string) => {\r\n            const item = this.nbt[key]\r\n            const newPath = [...path, key]\r\n            return {\r\n                title: key,\r\n                key: newPath.join('-'),\r\n                children: item instanceof NbtItem\r\n                    ? item.toTree(newPath)\r\n                    : item instanceof NbtArrayItem \r\n                        ? item.toTree(newPath)\r\n                        : []\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n","export const numberRule = {\r\n    byte: { min: -128, max: 127, step: 1, precision: 0 },\r\n    short: { min: -32768, max: 32767, step: 1, precision: 0 },\r\n    int: { min: -2147483648, max: 2147483647, step: 1, precision: 0 },\r\n    long: { step: 1, precision: 0 },\r\n    float: { step: 1 },\r\n    double: { step: 1 },\r\n}","import React, { useState, useContext } from 'react';\r\nimport { Row, Col, Button, Input, InputNumber } from 'antd';\r\nimport { pathItem } from '../../lib/Nbt/NbtItem';\r\nimport Compound, { INbtItem } from '../Compound';\r\nimport { NbtContext } from '../../view/World';\r\nimport { numberRule } from '../../util/rule';\r\nimport { NbtNumberType } from '../../util/interface';\r\nimport { DownOutlined, PlusOutlined, DeleteOutlined, UpOutlined, CloseOutlined } from '@ant-design/icons';\r\n\r\ninterface IProps {\r\n    label: string;\r\n    count: number;\r\n    subtype: string;\r\n    path: pathItem[];\r\n    value: Array<INbtItem | string>;\r\n    description: string;\r\n}\r\n\r\nexport default function List(props: IProps) {\r\n    const { store, dispatch } = useContext(NbtContext);\r\n    const [visible, setVisible] = useState(true)\r\n    const [mark, setMark] = useState(false)\r\n    const paddingLeft = (props.path.length + 1) * store.indent\r\n\r\n    function formInputChange(value: string, index: number) {\r\n        dispatch({ type: 'setActNbt', payload: { key: props.label, path: props.path, value, index }})\r\n    }\r\n    function formInputNumberChange(value: any, index: number) {\r\n        dispatch({ type: 'setActNbt', payload: { key: props.label, path: props.path, value, index }})\r\n    }\r\n    \r\n    function getField(value: string, index: number) {\r\n        switch (props.subtype) {\r\n            case 'byte':\r\n            case 'int':\r\n            case 'short':\r\n            case 'long':\r\n            case 'float':\r\n            case 'double':\r\n            case 'number':\r\n            case 'string':\r\n                return (\r\n                    <Row style={{ paddingBottom: 16 }}>\r\n                        <Col offset={4} span={14}>\r\n                            <div className=\"nbt-item\" style={{ marginLeft: paddingLeft }}>\r\n                                <Input value={value} placeholder='请输入' onChange={ e => formInputChange(e.target.value, index) } />\r\n                            </div>\r\n                        </Col>\r\n                        <Col span={4} style={{ paddingLeft: 32 }}>\r\n                            {\r\n                                !props.count ? <CloseOutlined style={{ paddingRight: 16, paddingTop: 8, color: 'red' }} onClick={ () => remove(index)} /> : null\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                )\r\n            default:\r\n                return <Compound\r\n                    btns={[\r\n                        <Button type='ghost' key='remove' onClick={ () => remove(index)}>\r\n                            <CloseOutlined style={{ color: 'red' }} />\r\n                        </Button>\r\n                    ]}\r\n                    tpl={props.subtype}\r\n                    description={props.description}\r\n                    label={props.subtype}\r\n                    value={props.value[index] as INbtItem}\r\n                    path={[...props.path, [props.label, index]]} />;\r\n        }\r\n    }\r\n    function createItem() {\r\n        return props.value\r\n            ? props.value.map((item: any, i: number) => (\r\n                <React.Fragment key={i}>\r\n                    <Col span={24}>\r\n                        {getField(item, i)}\r\n                    </Col>\r\n                </React.Fragment>\r\n            ))\r\n            : null\r\n    }\r\n    function add() {\r\n        setVisible(() => true)\r\n        dispatch({ type: 'array/add', payload: { key: props.label, path: props.path }})\r\n    }\r\n    function clear() {\r\n        dispatch({ type: 'array/clear', payload: { key: props.label, path: props.path }})\r\n    }\r\n    function remove(index: number) {\r\n        dispatch({ type: 'array/remove', payload: { key: props.label, path: props.path, index }})\r\n    }\r\n    function mouseEnter(e: React.MouseEvent<HTMLDivElement>) {\r\n        e.stopPropagation()\r\n        setMark(() => true)\r\n    }\r\n    function mouseOut(e: React.MouseEvent<HTMLDivElement>) {\r\n        setMark(() => false)\r\n    }\r\n\r\n    if (props.count) {\r\n        const width = 100 / props.count + '%';\r\n        if (props.subtype === 'string') {\r\n            return (\r\n                <Row>\r\n                    <Col span={24} style={{ paddingBottom: 8 }}>\r\n                        <Row>\r\n                            <Col onMouseEnter={mouseEnter} onMouseLeave={mouseOut} span={4} style={{ textAlign: 'right', padding: '4px 16px 16px 0' }}>\r\n                                <span title={props.description}>{props.label}</span>\r\n                            </Col>\r\n                            <Col span={20}>\r\n                                <div className=\"nbt-item\" style={{ marginLeft: paddingLeft }}>\r\n                                    <Input.Group compact>\r\n                                        {\r\n                                            props.value.map((item: any, i: number) => (\r\n                                                <Input key={i} value={item} style={{ marginBottom: 8, width }} placeholder='请输入' onChange={ e => formInputChange(e.target.value, i) } />\r\n                                            ))\r\n                                        }\r\n                                    </Input.Group>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        }\r\n        const rules = numberRule[props.subtype as NbtNumberType]\r\n        return (\r\n            <Row>\r\n                <Col span={24} style={{ paddingBottom: 8 }}>\r\n                    <Row>\r\n                        <Col onMouseEnter={mouseEnter} onMouseLeave={mouseOut} span={4} style={{ textAlign: 'right', padding: '4px 16px 16px 0' }}>\r\n                            <span title={props.description}>{props.label}</span>\r\n                        </Col>\r\n                        <Col span={20}>\r\n                            <div className=\"nbt-item\" style={{ marginLeft: paddingLeft }}>\r\n                                <Input.Group compact>\r\n                                    {\r\n                                        props.value.map((item: any, i: number) => (\r\n                                            <InputNumber\r\n                                                style={{ marginBottom: 8, width }}\r\n                                                key={i}\r\n                                                {...rules}\r\n                                                placeholder='请输入'\r\n                                                value={item} \r\n                                                onChange={e => formInputNumberChange(e, i)} />\r\n                                        ))\r\n                                    }\r\n                                </Input.Group>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n    return (\r\n        <Row className={mark ? `nbt-list` : ''}>\r\n            <Col span={24} style={{ paddingBottom: 8 }}>\r\n                <Row>\r\n                    <Col onMouseEnter={mouseEnter} onMouseLeave={mouseOut} span={4} style={{ textAlign: 'right', padding: '4px 16px 16px 0' }}>\r\n                        <span>{props.label}</span>\r\n                    </Col>\r\n                    <Col span={16}>\r\n                        <div className=\"nbt-item\" style={{ marginLeft: paddingLeft >= 0 ? paddingLeft : 0 }}>\r\n                            <Button.Group>\r\n                                <Button type='ghost' disabled={ props.count ? true : false } onClick={ () => add() } title='新增'><PlusOutlined /></Button>\r\n                                <Button type='ghost' disabled={ props.count ? true : false } onClick={ () => clear() } title='清空'><DeleteOutlined /></Button>\r\n                                <Button type='ghost' onClick={() => setVisible(v => !v)} title='展开/折叠'>{ visible ? <UpOutlined /> : <DownOutlined /> }</Button>\r\n                            </Button.Group>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n            { visible ? createItem() : null }\r\n        </Row>\r\n    )\r\n}","import React, { useState, useEffect, useContext } from 'react'\r\nimport { Select, Input, Row, Col, Button, InputNumber, Radio, Divider, Typography, Switch, Tooltip, message } from 'antd'\r\nimport ButtonGroup from 'antd/lib/button/button-group';\r\nimport { NbtContext } from '../../view/World';\r\nimport NbtItem, { pathItem } from '../../lib/Nbt/NbtItem';\r\nimport { ISelect } from '../../util/interface';\r\nimport { RadioChangeEvent } from 'antd/lib/radio';\r\nimport { isSimpleType } from '../../util';\r\nimport List from '../List';\r\nimport { DownOutlined, UpOutlined, SnippetsOutlined } from '@ant-design/icons';\r\nimport copy from 'copy-to-clipboard'\r\nimport { compoundIndent } from '../../config/const';\r\nimport './index.less'\r\n\r\nexport type NbtDataType = INbtItem | INbtArrayItem | INbtValue<string | string[] | boolean | number>\r\n\r\nexport interface INbtArrayItem { tpl: string, value: INbtItem[] }\r\n\r\nexport interface INbt<T> { [attr: string]: T }\r\n\r\nexport interface INbtValue<T> {\r\n    value: T;\r\n}\r\n\r\nexport interface INbtItem {\r\n    tpl: string;\r\n    has: string[];\r\n    nbt: INbt<NbtDataType>;\r\n    index: number;\r\n    dynamic: boolean\r\n}\r\n\r\ninterface IProps {\r\n    value?: INbtItem;\r\n    label: string;\r\n    description: string;\r\n    path: pathItem[];\r\n    componentOptions?: ISelect[];\r\n    componentValue?: string;\r\n    className?: string;\r\n    tpl: string;\r\n    btns?: React.ReactNode[];\r\n}\r\n\r\nconst clsPrefix = 'nbt-compound'\r\n\r\nexport default function Compound(props: IProps) {\r\n    const { store, dispatch } = useContext(NbtContext);\r\n    const [keyOptions, setKeyOptions] = useState<ISelect[]>([]);\r\n    const [tplOptions, setTplOptions] = useState<ISelect[]>([]);\r\n    const [visible, setVisible] = useState(true);\r\n    const [mark, setMark] = useState(false)\r\n\r\n    useEffect(\r\n        () => {\r\n            if (props.tpl) {\r\n                const compound = store.$nbtStore.getNbtObjectByName(props.tpl, props.value.index)\r\n                const options = Object.keys(compound).map(v => ({ id: v, name: v }))\r\n                setKeyOptions(() => options)\r\n                \r\n                const tplCompound = store.$nbtStore.getNbtObjectByName(props.tpl)\r\n                if (Array.isArray(tplCompound)) {\r\n                    const tplOptions = tplCompound.map(v => ({ id: v, name: v }))\r\n                    setTplOptions(() => tplOptions)\r\n                }\r\n            }\r\n        }, \r\n        [props.tpl, props.value.index]\r\n    )\r\n\r\n    const paddingLeft = (props.path.length + 1) * store.indent\r\n    \r\n    function selectChange(key: any) {\r\n        setVisible(() => true)\r\n        dispatch({ type: 'add', payload: { path: props.path, key } })\r\n    }\r\n    function deSelectChange(key: any) {\r\n        dispatch({ type: 'remove', payload: { path: props.path, key } })\r\n    }\r\n    function change(value: string[]) {\r\n        if (!value.length) {\r\n            dispatch({ type: 'clear', payload: { path: props.path } })\r\n        }\r\n    }\r\n    function getOptionsData (options: ISelect | string) {\r\n        return typeof options === 'string' ? store.$map[options] : options;\r\n    }\r\n    function formInputChange(value: string, key: string) {\r\n        dispatch({ type: 'setActNbt', payload: { key, path: props.path, value }})\r\n    }\r\n    function formInputNumberChange(value: any, key: string) {\r\n        dispatch({ type: 'setActNbt', payload: { key, path: props.path, value }})\r\n    }\r\n    function formSwitchChange(value: boolean, key: string) {\r\n        dispatch({ type: 'setActNbt', payload: { key, path: props.path, value }})\r\n    }\r\n    function formSelectChange(value: string, key: string) {\r\n        dispatch({ type: 'setActNbt', payload: { key, path: props.path, value }})\r\n    }\r\n    function getField(tpl: string, nbt: INbt<NbtDataType>, key: string, index: number) {\r\n        const item = store.$nbtStore.getNbtObjectByName(tpl, index)[key];\r\n        if (!item) {\r\n            return null\r\n        }\r\n        const componentOptions = Array.isArray(item.subtype) ? item.subtype.map(v => ({ id: v, name: v })) : null\r\n        const componentValue = Array.isArray(item.subtype) ? item.subtype[0] : ''\r\n        const label = item.title ? item.title : key;\r\n        const subTpl = key;\r\n        if (item.type === 'enum') {\r\n            const options = getOptionsData(item.enum)\r\n            return (\r\n                <React.Fragment key={key}>\r\n                    <Col style={{ textAlign: 'end', padding: '4px 16px 16px 0' }} span={4}>\r\n                        <Tooltip title={item.description}>\r\n                            <span>{label}</span>\r\n                        </Tooltip>\r\n                    </Col>\r\n                    <Col span={20} style={{ paddingBottom: 16 }}>\r\n                        <div className=\"nbt-item\" style={{ marginLeft: paddingLeft }}>\r\n                            <Select showSearch allowClear notFoundContent='暂无内容' placeholder='请选择' style={{ width: '100%' }}\r\n                                // filterOption={(value, { children }) => (children[0] + children[2]).includes(value)}\r\n                                value={(nbt[key] as INbtValue<string>).value}\r\n                                onChange={(value: string) => formSelectChange(value, key)}>\r\n                                {\r\n                                    typeof options[0] === 'string'\r\n                                        ? options.map((v: string) => <Select.Option key={v} value={v}>{v}</Select.Option>)\r\n                                        : options.map((v: ISelect) => <Select.Option key={v.id} value={v.id}>{v.id}（{v.name}）</Select.Option>)\r\n                                }\r\n                            </Select>\r\n                        </div>\r\n                    </Col>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        if (item.type === 'object') {\r\n            const nbtProp = (nbt as INbt<INbtItem>)[key]\r\n            return (\r\n                <React.Fragment key={key}>\r\n                    <Col span={24}>\r\n                        <Compound\r\n                            description={item.description}\r\n                            value={nbtProp}\r\n                            componentOptions={componentOptions}\r\n                            componentValue={componentValue}\r\n                            label={label}\r\n                            tpl={nbtProp.tpl ? nbtProp.tpl : subTpl}\r\n                            path={[...props.path, key]} />\r\n                    </Col>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        if (item.type === 'string') {\r\n            return (\r\n                <React.Fragment key={key}>\r\n                    <Col style={{ textAlign: 'end', padding: '4px 16px 16px 0' }} span={4}>\r\n                        <Tooltip title={item.description}>\r\n                            <span>{label}</span>\r\n                        </Tooltip>\r\n                    </Col>\r\n                    <Col span={20} style={{ paddingBottom: 16 }}>\r\n                        <div className=\"nbt-item\" style={{ marginLeft: paddingLeft }}>\r\n                            <Input\r\n                                style={{ width: '100%' }}\r\n                                disabled={item.disabled}\r\n                                value={(nbt[key] as INbtValue<string>).value} \r\n                                onChange={e => formInputChange(e.target.value, key)}\r\n                                placeholder='请输入' />\r\n                        </div>\r\n                    </Col>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        if (item.type === 'list') {\r\n            let listValue = isSimpleType(item.subtype as string) \r\n                ? (nbt[key] as INbtValue<string[]>).value\r\n                : (nbt as INbt<INbtArrayItem>)[key].value\r\n            if (item.minItems && listValue.length !== item.minItems) {\r\n                listValue = Array.from({ length: item.minItems }, () => '') as string[]\r\n            }\r\n            return (\r\n                <React.Fragment key={key}>\r\n                    <Col span={24}>\r\n                        <List description={item.description} count={item.minItems} value={listValue} subtype={Array.isArray(item.subtype) ? item.subtype[0] : item.subtype } label={label} path={props.path} />\r\n                    </Col>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        if (item.type === 'bool') {\r\n            return (\r\n                <React.Fragment key={key}>\r\n                    <Col style={{ textAlign: 'end', padding: '4px 16px 16px 0' }} span={4}>\r\n                        <Tooltip title={item.description}>\r\n                            <span>{label}</span>\r\n                        </Tooltip>\r\n                    </Col>\r\n                    <Col span={20} style={{ paddingBottom: 16 }}>\r\n                        <div className=\"nbt-item\" style={{ marginLeft: paddingLeft }}>\r\n                            <Switch checked={(nbt[key] as INbtValue<boolean>).value} onChange={e => formSwitchChange(e, key)}/>\r\n                        </div>\r\n                    </Col>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        return (\r\n            <React.Fragment key={key}>\r\n                <Col style={{ textAlign: 'end', padding: '4px 16px 16px 0' }} span={4}>\r\n                    <Tooltip title={item.description}>\r\n                        <span>{label}</span>\r\n                    </Tooltip>\r\n                </Col>\r\n                <Col span={20} style={{ paddingBottom: 16 }}>\r\n                    <div className=\"nbt-item\" style={{ marginLeft: paddingLeft }}>\r\n                        <InputNumber \r\n                            style={{ width: '100%' }}\r\n                            disabled={item.disabled}\r\n                            value={(nbt[key] as INbtValue<number>).value} \r\n                            onChange={e => formInputNumberChange(e, key)}\r\n                            placeholder='请输入'/>\r\n                    </div>\r\n                </Col>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    function createItem (item: INbtItem) {\r\n        if (item) {\r\n            const { tpl, nbt } = item;\r\n            return nbt\r\n                ? Object.keys(nbt).map(key => getField(tpl, nbt, key, item.index))\r\n                : []\r\n        }\r\n        return []\r\n    }\r\n    function mouseEnter(e: React.MouseEvent<HTMLDivElement>) {\r\n        e.stopPropagation()\r\n        setMark(() => true)\r\n    }\r\n    function mouseOut(e: React.MouseEvent<HTMLDivElement>) {\r\n        setMark(() => false)\r\n    }\r\n    function output() {\r\n        const data = NbtItem.getItem(store.actNbt, props.path)\r\n        console.log(data.toTree());\r\n        const json = JSON.stringify(data.toPureJson(), null, 2)\r\n        copy(json)\r\n        message.success('已复制到剪贴板')\r\n    }\r\n    function componentChange(e: RadioChangeEvent) {\r\n        dispatch({ type: 'updateTpl', payload: { path: props.path, tpl: e.target.value } })\r\n    }\r\n    function indexChange(value: string) {\r\n        const index = tplOptions.findIndex(item => item.id === value)\r\n        dispatch({ type: 'updateIndex', payload: { path: props.path, index } })\r\n    }\r\n    function dropdownRender(menu: React.ReactNode) {\r\n        return (\r\n            <div>\r\n                {\r\n                    props.componentOptions\r\n                        ? (\r\n                            <div style={{ padding: '0 8px' }}>\r\n                                <Typography.Text style={{ paddingRight: 16 }} type=\"secondary\">选项</Typography.Text>\r\n                                <Radio.Group onChange={componentChange} defaultValue={props.componentValue}>\r\n                                    { props.componentOptions.map(item => <Radio key={item.id} value={item.id}>{item.name}</Radio>) }\r\n                                </Radio.Group>\r\n                                <Divider style={{ margin: '4px 0' }} />\r\n                            </div>\r\n                        )\r\n                        : null\r\n                }\r\n                {menu}\r\n            </div>\r\n        )\r\n    }\r\n    const defaultCls = mark ? `${clsPrefix}--highlight ${clsPrefix}` : clsPrefix\r\n    const cls = [defaultCls, props.className]\r\n    return (\r\n        <Row className={cls.join(' ')}>\r\n            <Col span={24}>\r\n                <Row>\r\n                    <Col onMouseEnter={mouseEnter} onMouseLeave={mouseOut} span={4} style={{ textAlign: 'right', padding: '4px 16px 16px 0' }}>\r\n                        <Tooltip title={props.description}>\r\n                            <span>{props.label}</span>\r\n                        </Tooltip>\r\n                    </Col>\r\n                    <Col span={14} style={{ paddingBottom: 16 }}>\r\n                        <div className=\"nbt-item\" style={{ marginLeft: paddingLeft - compoundIndent >= 0 ? paddingLeft - compoundIndent : 0 }}>\r\n                            <Input.Group compact>\r\n                                {\r\n                                    !!tplOptions.length && (\r\n                                        <Select\r\n                                            allowClear\r\n                                            placeholder='请选择'\r\n                                            notFoundContent='暂无内容'\r\n                                            value={tplOptions[props.value.index].id}\r\n                                            onChange={indexChange}\r\n                                            style={{ width: '40%' }}>\r\n                                            {\r\n                                                tplOptions.map(item => <Select.Option key={item.id} value={item.id}>{item.name}</Select.Option>)\r\n                                            }\r\n                                        </Select>\r\n                                    )\r\n                                }\r\n                                <Select\r\n                                    allowClear\r\n                                    mode='multiple'\r\n                                    maxTagCount={0}\r\n                                    placeholder='请选择'\r\n                                    notFoundContent='暂无内容'\r\n                                    style={{ width: tplOptions.length ? '60%' : '100%' }}\r\n                                    onChange={change}\r\n                                    value={props.value.has}\r\n                                    onDeselect={deSelectChange}\r\n                                    dropdownRender={dropdownRender}\r\n                                    maxTagPlaceholder={(data) => `已选${data.length}项（${keyOptions.length}）`} \r\n                                    onSelect={selectChange} >\r\n                                    {\r\n                                        keyOptions.map((item: ISelect) => <Select.Option key={item.id} value={item.id}>{item.name}</Select.Option>)\r\n                                    }\r\n                                </Select>\r\n                            </Input.Group>\r\n                        </div>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <ButtonGroup style={{ marginLeft: 16 }}>\r\n                            <Button type='ghost' onClick={() => setVisible(v => !v)} title='展开/折叠'>{ visible ? <UpOutlined /> : <DownOutlined /> }</Button>\r\n                            <Button type='ghost' onClick={output} title='生成'><SnippetsOutlined /></Button>\r\n                            {props.btns}\r\n                        </ButtonGroup>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n            { visible ? createItem(props.value) : null }\r\n        </Row>\r\n    )\r\n}","export const compoundIndent = 24","import { merge } from \"../../../util\"\r\nimport { GObject, ISelect, NbtType } from \"../../../util/interface\"\r\n\r\nexport type CompoundObject = GObject<NbtComponent>\r\nexport type NbtObject = GObject<NbtProps>\r\nexport type KeyObject = GObject<string[]>\r\nexport interface NbtComponent {\r\n    base?: string[];\r\n    has?: string[] | boolean;\r\n    nbt?: NbtObject | string[];\r\n    root?: boolean;\r\n    key?: KeyObject;\r\n}\r\nexport interface NbtProps {\r\n    type?: NbtType;\r\n    enum?: string | ISelect;\r\n    subtype?: string | string[];\r\n    default?: string | boolean | number;\r\n    title?: string;\r\n    description?: string;\r\n    disabled?: boolean;\r\n    link?: string[];\r\n    linkType?: string;\r\n\r\n    minItems?: number;\r\n    maxItems?: number;\r\n    max?: number;\r\n    min?: number;\r\n}\r\nexport default class NbtStore {\r\n    private store: CompoundObject = {};\r\n\r\n    constructor(data: CompoundObject = {}) {\r\n        this.store = data\r\n        this.merge(data)\r\n    }\r\n\r\n    private initEnum() {\r\n        Object.keys(this.store).forEach(key => {\r\n            const item = this.store[key]\r\n            if (item.key) {\r\n                const nbt = item.nbt as NbtObject\r\n                Object.keys(nbt).forEach(k => {\r\n                    const [, nbtKey] = /^\\$\\{(.+)\\}$/.exec(k) || []\r\n                    if (nbtKey) {\r\n                        const tpl = nbt[k]\r\n                        const enumKeys = item.key[nbtKey]\r\n                        enumKeys.reduce((s, k) => {\r\n                            s[`${k}_${nbtKey}`] = tpl\r\n                            return s\r\n                        }, nbt)\r\n                        delete nbt[k]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n    \r\n    public merge(data: CompoundObject) {\r\n        merge(this.store, data)\r\n        Object.keys(data).reduce<CompoundObject>(\r\n            (s, k) => {\r\n                s[k] = this.build(k)\r\n                return s\r\n            },\r\n            this.store\r\n        )\r\n        this.initEnum()\r\n    }\r\n\r\n    private build(name: string, result = {}, has: string[] = []) {\r\n        if (has.includes(name)) {\r\n            return {}\r\n        }\r\n        const inst = this.store[name]\r\n        if (!inst) {\r\n            return {}\r\n        }\r\n        has.push(name)\r\n        if (inst.base) {\r\n            inst.base.forEach(v => merge(result, this.build(v, result, has)))\r\n        }\r\n        merge(result, inst)\r\n        return result\r\n    }\r\n\r\n    public getRootNodes(): string[] {\r\n        return Object.keys(this.store).filter((k) => this.store[k].root)\r\n    }\r\n    \r\n    public getNbtObjectByName(name: string): NbtObject | string[]\r\n    public getNbtObjectByName(name: string, index: number): NbtObject\r\n    public getNbtObjectByName(name: string, index?: number): NbtObject | string[] {\r\n        const nbt = this.store[name]?.nbt\r\n        if (Number.isInteger(index) && Array.isArray(nbt)) {\r\n            return this.store[nbt[!~index ? 0 : index]]?.nbt as NbtObject\r\n        }\r\n        return nbt\r\n    }\r\n\r\n    public getComponentByName(name: string) {\r\n        return this.store[name]\r\n    }\r\n    \r\n    public getStore() {\r\n        return this.store\r\n    }\r\n}","import React, { useEffect, useReducer, useState } from \"react\";\r\nimport { notification, Switch, Tag, Tree } from \"antd\";\r\nimport Compound from \"../../comps/Compound\";\r\nimport NbtItem from \"../../lib/Nbt/NbtItem\";\r\nimport NbtStore from \"../../lib/parse/config/NbtStore\";\r\nimport NbtArrayItem from \"../../lib/Nbt/NbtArrayItem\";\r\nimport { compoundIndent } from \"../../config/const\";\r\nimport './index.less'\r\n\r\nexport interface IContext {\r\n    store: IState;\r\n    dispatch: React.Dispatch<IAction>;\r\n}\r\n\r\ninterface IState {\r\n    actNbt: NbtItem;\r\n    nbtJson: any;\r\n    $nbtStore: NbtStore;\r\n    $map: any;\r\n    indent: number;\r\n}\r\n\r\ninterface IAction {\r\n    type: string;\r\n    payload: any;\r\n}\r\n\r\nconst initialState: IState = {\r\n    actNbt: null,\r\n    nbtJson: {},\r\n    $nbtStore: new NbtStore(),\r\n    $map: {},\r\n    indent: 0,\r\n}\r\n\r\nexport const NbtContext = React.createContext<IContext>(null)\r\n\r\nfunction reducer(state: IState, action: IAction) {\r\n    const { type, payload } = action\r\n    if (type === 'initData') {\r\n        const { $nbtStore, $map } = payload\r\n        state.$nbtStore.merge($nbtStore)\r\n        return { ...state, $map }\r\n    }\r\n    if (type === 'addNbt') {\r\n        const actNbt = new NbtItem(payload, state.$nbtStore)\r\n        return { ...state, actNbt, nbtJson: actNbt.toJson() }\r\n    }\r\n    if (type === 'updateNbtJson') {\r\n        return { ...state, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'setActNbt') {\r\n        const { path, key, value, index } = payload\r\n        const item = NbtItem.getItem(state.actNbt, path)\r\n        item.setNbt(key, value, index)\r\n        return { ...state, actNbt: state.actNbt, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'add') {\r\n        const { path, key } = payload\r\n        const item = NbtItem.getItem(state.actNbt, path)\r\n        item.add(key)\r\n        return { ...state, actNbt: state.actNbt, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'remove') {\r\n        const { path, key } = payload\r\n        const item = NbtItem.getItem(state.actNbt, path)\r\n        item.remove(key)\r\n        return { ...state, actNbt: state.actNbt, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'clear') {\r\n        const { path } = payload\r\n        const item = NbtItem.getItem(state.actNbt, path)\r\n        item.clear()\r\n        return { ...state, actNbt: state.actNbt, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'updateTpl') {\r\n        const { tpl, path } = payload\r\n        const item = NbtItem.getItem(state.actNbt, path)\r\n        item.setTpl(tpl)\r\n        return { ...state, actNbt: state.actNbt, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'updateIndex') {\r\n        const { index, path } = payload\r\n        const item = NbtItem.getItem(state.actNbt, path)\r\n        item.setIndex(index)\r\n        return { ...state, actNbt: state.actNbt, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'array/clear') {\r\n        const { path, key } = payload\r\n        const item = NbtItem.getItem(state.actNbt, path)\r\n        const nbt = item.getNbt(key)\r\n        if (nbt instanceof NbtArrayItem) {\r\n            nbt.clear()\r\n        } else {\r\n            item.setNbt(key, [], undefined)\r\n        }\r\n        return { ...state, actNbt: state.actNbt, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'array/remove') {\r\n        const { path, index, key } = payload\r\n        const nbt = NbtItem.getItem(state.actNbt, path).getNbt(key).value\r\n        nbt.splice(index, 1)\r\n        return { ...state, actNbt: state.actNbt, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'array/add') {\r\n        const { path, key } = payload\r\n        const item = NbtItem.getItem(state.actNbt, path).getNbt(key)\r\n        if (item instanceof NbtArrayItem) {\r\n            item.add()\r\n        } else {\r\n            item.value.push('')\r\n        }\r\n        return { ...state, actNbt: state.actNbt, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'setIndent') {\r\n        const indent = payload\r\n        return { ...state, indent }\r\n    }\r\n    return state\r\n}\r\nexport default function() {\r\n    const [store, dispatch] = useReducer(reducer, initialState)\r\n    const [treeData, setTreeData] = useState([])\r\n    const [rootNodes, setRootNodes] = useState([])\r\n\r\n    useEffect(() => {\r\n        fetch('./world.json').then(res => res.json()).then(res => {\r\n            dispatch({ type: 'initData', payload: { $nbtStore: res, $map: {} }})\r\n            setRootNodes(() => {\r\n                const nodes = store.$nbtStore.getRootNodes()\r\n                tagClick(nodes[0])\r\n                return nodes\r\n            })\r\n        })\r\n        notification.success({\r\n            duration: null,\r\n            message: 'CBer玩家',\r\n            description: '欢迎使用worldgen，软件处于测试状态'\r\n        })\r\n    }, [])\r\n\r\n    useEffect(\r\n        () => {\r\n            if (store.actNbt) {\r\n                setTreeData(() => store.actNbt.toTree())\r\n            }\r\n        },\r\n        [store.nbtJson]\r\n    )\r\n\r\n    function tagClick(tplName: string) {\r\n        dispatch({ type: 'addNbt', payload: tplName })\r\n    }\r\n    function switchIndent() {\r\n        dispatch({ type: 'setIndent', payload: !!store.indent ? 0 : compoundIndent })\r\n    }\r\n    function treeClick(...args: any) {\r\n        // console.log(args);\r\n    }\r\n\r\n    return (\r\n        <div className=\"gen\">\r\n            <NbtContext.Provider value={{ store, dispatch }}>\r\n                <div className=\"gen__left\" style={{ paddingTop: 24 }}>\r\n                    <Tree onClick={treeClick} defaultExpandAll treeData={treeData} showLine />\r\n                </div>\r\n                <div className=\"gen__right\">\r\n                    <div className=\"gen__wrap\">\r\n                        <div style={{ height: 40, paddingTop: 8 }}>\r\n                            <Switch checkedChildren=\"开\" unCheckedChildren=\"关\" style={{ marginLeft: 16, float: 'right', textAlign: 'right' }} onChange={switchIndent} />\r\n                            { \r\n                                rootNodes.length > 1 && rootNodes.map(item => <Tag color={store.actNbt?.getTpl() === item ? 'processing' : 'default'} key={item} onClick={() => tagClick(item)}>{item}</Tag>) \r\n                            }\r\n                        </div>\r\n                        {\r\n                            store.actNbt && (\r\n                                <Compound\r\n                                    className='root'\r\n                                    description={''}\r\n                                    label={store.nbtJson.tpl}\r\n                                    tpl={store.nbtJson.tpl}\r\n                                    value={store.nbtJson}\r\n                                    path={[]} />\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </NbtContext.Provider>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport World from './view/World'\nimport './App.less';\nimport './lib/Nbt'\n\nexport default () => {\n    return (\n        <World />\n    )   \n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.less';\n\nReactDOM.render(\n  <div className='main'>\n        <h1>\n            Worldgen测试版\n            <span>匠心打造，追求极致</span>\n            <div className='right'>\n                <a href=\"https://hans000.gitee.io/mc-viewer/\" target='_blank'>viewer</a>\n                <a href=\"https://hans000.gitee.io/jtext-studio/\" target='_blank'>JText Studio</a>\n                <a href=\"https://gitee.com/hans000/worldgen\" target='_blank'>使用文档</a>\n                <a href=\"https://gitee.com/hans000/worldgen/issues\" target='_blank'> 问题反馈</a>\n                {/* <a href=\"https://gitee.com/hans000/worldgen/blob/master/CHANGELOG.md\" target='_blank'> 更新日志</a> */}\n            </div>\n        </h1>\n        <div className=\"cont\">\n            <App />\n        </div>\n    </div>\n  ,\n  document.getElementById('root')\n);"],"sourceRoot":""}