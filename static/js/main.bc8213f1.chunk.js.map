{"version":3,"sources":["util/index.ts","lib/Nbt/NbtArrayItem.ts","lib/stringify/map.ts","lib/Nbt/NbtItem.ts","util/rule.ts","comps/List/index.tsx","comps/Compound/index.tsx","view/World/index.tsx","lib/parse/config/NbtStore.ts","App.tsx","index.tsx"],"names":["merge","result","args","forEach","object","key","hasOwnProperty","emt","Array","isArray","trimEnd","raw","char","e","i","length","reg","RegExp","test","charAt","substr","NbtArrayItem","tpl","nbtStore","count","value","this","add","index","push","NbtItem","splice","reduce","s","v","toString","map","item","toJson","toPureJson","mapSuffix","dynamic","nbt","has","initItems","actNbt","path","obj","p","k","one","get","node","type","includes","clear","undefined","isSimpleType","default","subtype","from","minItems","fill","nbtItem","getComponentByName","name","data","getNbtObjectByName","link","triggerHandle","addAttr","Object","keys","removeHandle","indexOf","handle","linkType","join","numberRule","byte","min","max","step","precision","short","int","long","float","double","List","props","useContext","NbtContext","store","dispatch","useState","visible","setVisible","mark","setMark","paddingLeft","indent","formInputChange","payload","label","getField","style","paddingBottom","offset","span","className","marginLeft","placeholder","onChange","target","CloseOutlined","paddingRight","paddingTop","color","onClick","remove","Compound","description","mouseEnter","stopPropagation","mouseOut","width","onMouseEnter","onMouseLeave","textAlign","padding","title","Group","compact","marginBottom","rules","disabled","PlusOutlined","DeleteOutlined","UpOutlined","DownOutlined","Fragment","keyOptions","setKeyOptions","useEffect","compound","$nbtStore","options","id","componentOptions","componentValue","$map","getOptionsData","enum","showSearch","allowClear","notFoundContent","formSelectChange","Option","listValue","checked","formSwitchChange","formInputNumberChange","componentChange","cls","mode","maxTagCount","onDeselect","dropdownRender","menu","Text","defaultValue","margin","maxTagPlaceholder","onSelect","getItem","json","JSON","stringify","copy","message","success","SnippetsOutlined","createItem","initialState","nbtJson","build","inst","base","filter","root","React","createContext","reducer","state","action","setNbt","setTpl","getNbt","useReducer","fetch","then","res","tplName","getRootNodes","Provider","checkedChildren","unCheckedChildren","getTpl","World","ReactDOM","render","href","document","getElementById"],"mappings":"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","file":"static/js/main.bc8213f1.chunk.js","sourcesContent":["export function isSimpleType(type: string) {\r\n    return ['byte', 'int', 'bool', 'number', 'short', 'double', 'long', 'float', 'string', 'enum'].includes(type)\r\n}\r\n\r\nexport function parseNbtType(rawText: string) {\r\n    const result = /^([a-zA-Z0-9-_#]+)(\\[\\s*(\\d*)\\s*\\])?$/.exec(rawText) as RegExpExecArray\r\n    const [, type, subtype, count] = result\r\n    if (subtype) {\r\n        return {\r\n            type: 'list',\r\n            subtype: type,\r\n            count: count === '' ? undefined : +count\r\n        }\r\n    }\r\n    return {\r\n        type,\r\n    }\r\n}\r\n\r\nexport function merge(result: any = {}, ...args: any[]) {\r\n    args.forEach((object) => {\r\n        for (const key in object) {\r\n            if (object.hasOwnProperty(key)) {\r\n                const emt = object[key];\r\n                result[key] = typeof emt !== 'object' || Array.isArray(emt)\r\n                    ? emt\r\n                    : merge(result[key], emt)\r\n            }\r\n        }\r\n    })\r\n    return result\r\n}\r\n  \r\nexport function trimStart(raw: string, char=''): string {\r\n    let e = char == null || char === '' ? 's' : char\r\n    let reg = new RegExp(`^${e}*`)\r\n    return raw.replace(reg, '')\r\n}\r\n\r\nexport function trimEnd(raw: string, char=''): string {\r\n    let e = char == null || char === '' ? 's' : char\r\n    let i = raw.length\r\n    let reg = new RegExp(e)\r\n    while(reg.test(raw.charAt(--i))) {}\r\n    return raw.substr(0, i + 1)\r\n}\r\n\r\nexport function trim(raw: string, char=''): string {\r\n    return trimEnd(trimStart(raw, char), char)\r\n}","import NbtItem from \"./NbtItem\";\r\nimport { trimEnd } from \"../../util\";\r\nimport NbtStore from \"../parse/config/NbtStore\";\r\n\r\nexport default class NbtArrayItem {\r\n    private value: NbtItem[] = [];\r\n    private nbtStore: NbtStore;\r\n    private tpl: string = '';\r\n\r\n    constructor(tpl: string, nbtStore: NbtStore, count = 0) {\r\n        this.tpl = tpl\r\n        this.nbtStore = nbtStore\r\n        while(count--) {\r\n            this.add()\r\n        }\r\n    }\r\n    public get(index: number) {\r\n        return this.value[index]\r\n    }\r\n    public add() {\r\n        this.value.push(new NbtItem(this.tpl, this.nbtStore))\r\n    }\r\n    public remove(index: number) {\r\n        this.value.splice(index, 1)\r\n    }\r\n    public clear() {\r\n        this.value = []\r\n    }\r\n    public toString() {\r\n        const result = this.value.reduce((s, v) => {\r\n            s += v.toString() + ','\r\n            return s\r\n        }, '')\r\n        return `[${trimEnd(result, ',')}]`\r\n    }\r\n    public toJson(): any {\r\n        return {\r\n            tpl: this.tpl,\r\n            value: this.value.map(item => item.toJson())\r\n        }\r\n    }\r\n    public toPureJson(): any {\r\n        return {\r\n            tpl: this.tpl,\r\n            value: this.value.map(item => item.toPureJson())\r\n        }\r\n    }\r\n}","export const mapSuffix: { [name: string]: string } = {\r\n  'bool': 'b',\r\n  'byte': 'b',\r\n  'short': 's',\r\n  'long': 'l',\r\n  'float': 'f',\r\n  'double': 'd',\r\n  'int': '',\r\n  'string': '',\r\n  'enum': '',\r\n}\r\n\r\nexport const mapPrefix: { [name: string]: string } = {\r\n  'Modifiers.Name': 'generic.',\r\n  'id': 'minecraft:'\r\n}\r\n\r\nexport const mapListNum: string[] = [\r\n  'HandDropChances',\r\n  'ArmorDropChances',\r\n  'Pos',\r\n  'Motion',\r\n  'Rotation',\r\n  'UUID',\r\n  'Owner',\r\n  'direction',\r\n  'power',\r\n  'ItemRotation',\r\n]\r\n\r\nexport const mapList: string[] = [\r\n  'Lore',\r\n  'CanPlaceOn',\r\n  'CanDestroy',\r\n]\r\n\r\nexport const mapCompound: string[] = [\r\n  'ActiveEffects',\r\n  'HandItems',\r\n  'ArmorItems',\r\n  'Modifiers',\r\n  'Attributes',\r\n  'Leash',\r\n  'Enchantments',\r\n  'Passengers',\r\n  'Effects',\r\n  'Items',\r\n  'SpawnPotentials',\r\n]\r\n\r\nexport const mapComposition: string[] = [\r\n  'tag',\r\n  'display',\r\n  'Brain',\r\n  'BeamTarget',\r\n  'Item',\r\n  'TileEntityData',\r\n  'BlockState',\r\n  'FireworksItem',\r\n  'DisplayState',\r\n  'SpawnData',\r\n]","import { NbtNumberType } from './../../util/interface';\r\nimport { NbtProps } from './../parse/config/NbtStore';\r\nimport NbtArrayItem from \"./NbtArrayItem\";\r\nimport NbtStore from \"../parse/config/NbtStore\";\r\nimport { GObject } from '../../util/interface';\r\nimport { mapSuffix } from '../stringify/map';\r\nimport { trimEnd } from '../../util';\r\n\r\nexport type pathItem = string | [string, number]\r\nexport type NbtType = NbtItem | NbtArrayItem;\r\nexport interface INbtRoot {\r\n    path: pathItem[],\r\n    root: GObject<NbtItem>,\r\n}\r\n\r\nexport default class NbtItem {\r\n    private nbt: any = {};\r\n    private tpl: string = '';\r\n    private dynamic: boolean;\r\n    private nbtStore: NbtStore;\r\n    private has: string[] = [];\r\n\r\n    public static getItem(actNbt: NbtItem, path: pathItem[]): NbtItem {\r\n        if (!actNbt) return;\r\n        if (!path.length) return actNbt\r\n        let obj: NbtItem;\r\n        path.reduce(\r\n            (s: NbtItem, p: pathItem) => {\r\n                const nbt = s.nbt\r\n                if (Array.isArray(p)) {\r\n                    const [k, i] = p;\r\n                    const node = nbt[k] as NbtArrayItem;\r\n                    const one = node.get(i)\r\n                    obj = one;\r\n                    return one;\r\n                } else {\r\n                    const node = nbt[p] as NbtItem;\r\n                    obj = node;\r\n                    return node;\r\n                }\r\n            },\r\n            actNbt\r\n        )\r\n        return obj;\r\n    }\r\n\r\n    public static isSimpleType(type: string) {\r\n        return ['byte', 'int', 'number', 'bool', 'short', 'double', 'long', 'float', 'string', 'enum'].includes(type)\r\n    }\r\n\r\n    constructor(tpl: string, nbtStore: NbtStore, dynamic = false) {\r\n        this.tpl = tpl\r\n        this.nbtStore = nbtStore\r\n        this.dynamic = dynamic\r\n        this.initItems(this, tpl)\r\n    }\r\n\r\n    public getTpl() {\r\n        return this.tpl\r\n    }\r\n\r\n    public setTpl(tpl: string) {\r\n        this.tpl = tpl\r\n        this.clear()\r\n        this.initItems(this, tpl)\r\n    }\r\n\r\n    public getNbt(key: string) {\r\n        return this.nbt[key]\r\n    }\r\n    \r\n    public setNbt(key: string, value: any, index: number) {\r\n        if (index === undefined) {\r\n            this.nbt[key].value = value\r\n        } else {\r\n            this.nbt[key].value[index] = value\r\n        }\r\n    }\r\n\r\n    private addAttr(key: string, obj: NbtProps) {\r\n        if (this.has.includes(key)) {\r\n            return\r\n        }\r\n        if (NbtItem.isSimpleType(obj.type)) {\r\n            this.nbt[key] = {\r\n                value: obj.default,\r\n                type: obj.type,\r\n            }\r\n        } else {\r\n            if (obj.type === 'list') {\r\n                if (typeof obj.subtype === 'string') {\r\n                    if (NbtItem.isSimpleType(obj.subtype)) {\r\n                        this.nbt[key] = {\r\n                            value: Array.from({ length: obj.minItems }).fill(''),\r\n                            type: 'list',\r\n                            subtype: obj.subtype,\r\n                        }\r\n                    } else {\r\n                        this.nbt[key] = new NbtArrayItem(obj.subtype, this.nbtStore, obj.minItems)\r\n                    }\r\n                }\r\n            } else {\r\n                const tpl = Array.isArray(obj.subtype) ? obj.subtype[0] : obj.subtype\r\n                const nbtItem = new NbtItem(tpl, this.nbtStore, !!tpl)\r\n                this.initItems(nbtItem, tpl)\r\n                this.nbt[key] = nbtItem\r\n            }\r\n        }\r\n        this.has.push(key)\r\n    }\r\n\r\n    private initItems(nbtItem: NbtItem, tpl: string) {\r\n        const { has } = this.nbtStore.getComponentByName(tpl)\r\n        if (has) {\r\n            if (Array.isArray(has)) {\r\n                has.forEach(key => nbtItem.add(key))\r\n            } else {\r\n                nbtItem.add()\r\n            }\r\n        }\r\n    }\r\n\r\n    public add(name?: string) {\r\n        const data = this.nbtStore.getNbtObjectByName(this.tpl)\r\n        if (!name) {\r\n            Object.keys(data).map(key => this.addAttr(key, data[key]))\r\n            return\r\n        }\r\n        const { link } = data[name]\r\n        if (link?.length) {\r\n            this.triggerHandle(data, link, (key, item) => this.addAttr(key, item))\r\n        } else {\r\n            this.addAttr(name, data[name])\r\n        }\r\n    }\r\n\r\n    public remove(name: string) {\r\n        const data = this.nbtStore.getNbtObjectByName(this.tpl)\r\n        const { link } = data[name]\r\n        if (link?.length) {\r\n            this.triggerHandle(data, link, (key: string) => this.removeHandle(key))\r\n        } else {\r\n            this.removeHandle(name)\r\n        }\r\n    }\r\n\r\n    private removeHandle(key: string) {\r\n        delete this.nbt[key]\r\n        this.has.splice(this.has.indexOf(key), 1)\r\n    }\r\n\r\n    private triggerHandle(data: GObject<NbtProps>, link: string[], handle: (key: string, props: NbtProps) => void) {\r\n        Object.keys(data).forEach(key => {\r\n            if (link.includes(data[key].linkType)) {\r\n                handle(key, data[key])\r\n            }\r\n        })\r\n    }\r\n\r\n    public clear() {\r\n        this.has = []\r\n        this.nbt = {}\r\n    }\r\n\r\n    public toString() {\r\n        const result = Object.keys(this.nbt).reduce((s, k) => {\r\n            const item = this.nbt[k];\r\n            if (item instanceof NbtArrayItem || item instanceof NbtItem) {\r\n                s += `${k}:${item.toString()},`\r\n            } else if (item.type === 'list') {\r\n                if (item.subtype === 'string') {\r\n                    s += `${k}:[\"${item.value.join('\",\"')}\"],`\r\n                } else {\r\n                    s += `${k}:[${item.value.map((e: any) => (e ? e : 0) + mapSuffix[item.subtype]).join(',')}],`\r\n                }\r\n            } else {\r\n                if (item.type === 'bool') {\r\n                    s += `${k}:${+item.value}b,`\r\n                } else if (item.type === 'string') {\r\n                    s += `${k}:${item.value ? item.value : '\"\"'},`\r\n                } else if (item.type === 'enum') {\r\n                    s += `${k}:\"${item.value === undefined ? \"\" : item.value}\",`\r\n                } else {\r\n                    s += `${k}:${item.value === '' ? 0 : item.value}${mapSuffix[item.type]},`\r\n                }\r\n            }\r\n            return s\r\n        }, '')\r\n        return `{${trimEnd(result, ',')}}`\r\n    }\r\n\r\n    public toJson(): any {\r\n        return {\r\n            tpl: this.tpl,\r\n            has: [...this.has],\r\n            nbt: Object.keys(this.nbt).reduce((obj: any, key) => {\r\n                const item = this.nbt[key]\r\n                obj[key] = item instanceof NbtItem\r\n                    ? item.toJson()\r\n                    : item instanceof NbtArrayItem \r\n                        ? item.toJson()\r\n                        : { value: item.value }\r\n                \r\n                if (item.dynamic) {\r\n                    obj[key].tpl = item.tpl\r\n                }\r\n                return obj\r\n            }, {})\r\n        }\r\n    }\r\n\r\n    public toPureJson(): any {\r\n        return Object.keys(this.nbt).reduce((obj: any, key) => {\r\n            const item = this.nbt[key]\r\n                obj[key] = item instanceof NbtItem\r\n                    ? item.toPureJson()\r\n                    : item instanceof NbtArrayItem \r\n                        ? item.toPureJson()\r\n                        : item.value\r\n            return obj\r\n        }, {})\r\n    }\r\n}","export const numberRule = {\r\n    byte: { min: -128, max: 127, step: 1, precision: 0 },\r\n    short: { min: -32768, max: 32767, step: 1, precision: 0 },\r\n    int: { min: -2147483648, max: 2147483647, step: 1, precision: 0 },\r\n    long: { step: 1, precision: 0 },\r\n    float: { step: 1 },\r\n    double: { step: 1 },\r\n}","import React, { useState, useContext } from 'react';\r\nimport { Row, Col, Button, Input, InputNumber } from 'antd';\r\nimport { pathItem } from '../../lib/Nbt/NbtItem';\r\nimport Compound, { INbtItem } from '../Compound';\r\nimport { NbtContext } from '../../view/World';\r\nimport { numberRule } from '../../util/rule';\r\nimport { NbtNumberType } from '../../util/interface';\r\nimport { DownOutlined, PlusOutlined, DeleteOutlined, UpOutlined, CloseOutlined } from '@ant-design/icons';\r\n\r\ninterface IProps {\r\n    label: string;\r\n    count: number;\r\n    subtype: string;\r\n    path: pathItem[];\r\n    value: Array<INbtItem | string>;\r\n    description: string;\r\n}\r\n\r\nexport default function List(props: IProps) {\r\n    const { store, dispatch } = useContext(NbtContext);\r\n    const [visible, setVisible] = useState(true)\r\n    const [mark, setMark] = useState(false)\r\n    const paddingLeft = (props.path.length + 1) * store.indent\r\n\r\n    function formInputChange(value: string, index: number) {\r\n        dispatch({ type: 'setActNbt', payload: { key: props.label, path: props.path, value, index }})\r\n    }\r\n    function formInputNumberChange(value: any, index: number) {\r\n        dispatch({ type: 'setActNbt', payload: { key: props.label, path: props.path, value, index }})\r\n    }\r\n    \r\n    function getField(value: string, index: number) {\r\n        switch (props.subtype) {\r\n            case 'byte':\r\n            case 'int':\r\n            case 'short':\r\n            case 'long':\r\n            case 'float':\r\n            case 'double':\r\n            case 'number':\r\n            case 'string':\r\n                return (\r\n                    <Row style={{ paddingBottom: 16 }}>\r\n                        <Col offset={4} span={14}>\r\n                            <div className=\"nbt-item\" style={{ marginLeft: paddingLeft }}>\r\n                                <Input value={value} placeholder='请输入' onChange={ e => formInputChange(e.target.value, index) } />\r\n                            </div>\r\n                        </Col>\r\n                        <Col span={4} style={{ paddingLeft: 32 }}>\r\n                            {\r\n                                !props.count ? <CloseOutlined style={{ paddingRight: 16, paddingTop: 8, color: 'red' }} onClick={ () => remove(index)} /> : null\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                )\r\n            default:\r\n                return <Compound description={props.description} label={props.subtype } value={props.value[index] as INbtItem} path={[...props.path, [props.label, index]]} />;\r\n        }\r\n    }\r\n    function createItem() {\r\n        return props.value\r\n            ? props.value.map((item: any, i: number) => (\r\n                <React.Fragment key={i}>\r\n                    <Col span={24}>\r\n                        {getField(item, i)}\r\n                    </Col>\r\n                </React.Fragment>\r\n            ))\r\n            : null\r\n    }\r\n    function add() {\r\n        setVisible(() => true)\r\n        dispatch({ type: 'array/add', payload: { key: props.label, path: props.path }})\r\n    }\r\n    function clear() {\r\n        dispatch({ type: 'array/clear', payload: { key: props.label, path: props.path }})\r\n    }\r\n    function remove(index: number) {\r\n        dispatch({ type: 'array/remove', payload: { key: props.label, path: props.path, index }})\r\n    }\r\n    function mouseEnter(e: React.MouseEvent<HTMLDivElement>) {\r\n        e.stopPropagation()\r\n        setMark(() => true)\r\n    }\r\n    function mouseOut(e: React.MouseEvent<HTMLDivElement>) {\r\n        setMark(() => false)\r\n    }\r\n\r\n    if (props.count) {\r\n        const width = 100 / props.count + '%';\r\n        if (props.subtype === 'string') {\r\n            return (\r\n                <Row>\r\n                    <Col span={24} style={{ paddingBottom: 8 }}>\r\n                        <Row>\r\n                            <Col onMouseEnter={mouseEnter} onMouseLeave={mouseOut} span={4} style={{ textAlign: 'right', padding: '4px 16px 16px 0' }}>\r\n                                <span title={props.description}>{props.label}</span>\r\n                            </Col>\r\n                            <Col span={20}>\r\n                                <div className=\"nbt-item\" style={{ marginLeft: paddingLeft }}>\r\n                                    <Input.Group compact>\r\n                                        {\r\n                                            props.value.map((item: any, i: number) => (\r\n                                                <Input key={i} value={item} style={{ marginBottom: 8, width }} placeholder='请输入' onChange={ e => formInputChange(e.target.value, i) } />\r\n                                            ))\r\n                                        }\r\n                                    </Input.Group>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        }\r\n        const rules = numberRule[props.subtype as NbtNumberType]\r\n        return (\r\n            <Row>\r\n                <Col span={24} style={{ paddingBottom: 8 }}>\r\n                    <Row>\r\n                        <Col onMouseEnter={mouseEnter} onMouseLeave={mouseOut} span={4} style={{ textAlign: 'right', padding: '4px 16px 16px 0' }}>\r\n                            <span title={props.description}>{props.label}</span>\r\n                        </Col>\r\n                        <Col span={20}>\r\n                            <div className=\"nbt-item\" style={{ marginLeft: paddingLeft }}>\r\n                                <Input.Group compact>\r\n                                    {\r\n                                        props.value.map((item: any, i: number) => (\r\n                                            <InputNumber\r\n                                                style={{ marginBottom: 8, width }}\r\n                                                key={i}\r\n                                                {...rules}\r\n                                                placeholder='请输入'\r\n                                                value={item} \r\n                                                onChange={e => formInputNumberChange(e, i)} />\r\n                                        ))\r\n                                    }\r\n                                </Input.Group>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n    return (\r\n        <Row className={mark ? `nbt-list` : ''}>\r\n            <Col span={24} style={{ paddingBottom: 8 }}>\r\n                <Row>\r\n                    <Col onMouseEnter={mouseEnter} onMouseLeave={mouseOut} span={4} style={{ textAlign: 'right', padding: '4px 16px 16px 0' }}>\r\n                        <span>{props.label}</span>\r\n                    </Col>\r\n                    <Col span={16}>\r\n                        <div className=\"nbt-item\" style={{ marginLeft: paddingLeft - 32 >= 0 ? paddingLeft - 32 : 0 }}>\r\n                            <Button.Group>\r\n                                <Button type='ghost' disabled={ props.count ? true : false } onClick={ () => add() } title='新增'><PlusOutlined /></Button>\r\n                                <Button type='ghost' disabled={ props.count ? true : false } onClick={ () => clear() } title='清空'><DeleteOutlined /></Button>\r\n                                <Button type='ghost' onClick={() => setVisible(v => !v)} title='展开/折叠'>{ visible ? <UpOutlined /> : <DownOutlined /> }</Button>\r\n                            </Button.Group>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n            { visible ? createItem() : null }\r\n        </Row>\r\n    )\r\n}","import React, { useState, useEffect, useContext } from 'react'\r\nimport { Select, Input, Row, Col, Button, InputNumber, Radio, Divider, Typography, Switch, Tooltip, message } from 'antd'\r\nimport ButtonGroup from 'antd/lib/button/button-group';\r\nimport { NbtContext } from '../../view/World';\r\nimport NbtItem, { pathItem } from '../../lib/Nbt/NbtItem';\r\nimport { ISelect } from '../../util/interface';\r\nimport { RadioChangeEvent } from 'antd/lib/radio';\r\nimport { isSimpleType } from '../../util';\r\nimport List from '../List';\r\nimport { DownOutlined, UpOutlined, SnippetsOutlined } from '@ant-design/icons';\r\nimport copy from 'copy-to-clipboard'\r\n\r\nexport type NbtDataType = INbtItem | INbtArrayItem | INbtValue<string | string[] | boolean | number>\r\n\r\nexport interface INbtArrayItem { tpl: string, value: INbtItem[] }\r\n\r\nexport interface INbt<T> { [attr: string]: T }\r\n\r\nexport interface INbtValue<T> {\r\n    value: T;\r\n}\r\n\r\nexport interface INbtItem {\r\n    tpl: string,\r\n    has: string[],\r\n    nbt: INbt<NbtDataType>,\r\n}\r\n\r\ninterface IProps {\r\n    value?: INbtItem;\r\n    label: string;\r\n    description: string;\r\n    path: pathItem[];\r\n    componentOptions?: ISelect[];\r\n    componentValue?: string;\r\n    className?: string;\r\n}\r\n\r\nexport default function Compound(props: IProps) {\r\n    const { store, dispatch } = useContext(NbtContext);\r\n    const [keyOptions, setKeyOptions] = useState<ISelect[]>([]);\r\n    const [visible, setVisible] = useState(true);\r\n    const [mark, setMark] = useState(false)\r\n\r\n    useEffect(\r\n        () => {\r\n            if (props.label) {\r\n                const compound = store.$nbtStore.getNbtObjectByName(props.label)\r\n                const options = Object.keys(compound).map(v => ({ id: v, name: v }))\r\n                setKeyOptions(() => options)\r\n            }\r\n        }, \r\n        [props.label]\r\n        // [props.label, store.$nbtStore, keyOptions]\r\n    )\r\n\r\n    const paddingLeft = (props.path.length + 1) * store.indent\r\n    \r\n    function selectChange(key: any) {\r\n        setVisible(() => true)\r\n        dispatch({ type: 'add', payload: { path: props.path, key } })\r\n    }\r\n    function deSelectChange(key: any) {\r\n        dispatch({ type: 'remove', payload: { path: props.path, key } })\r\n    }\r\n    function change(value: string[]) {\r\n        if (!value.length) {\r\n            dispatch({ type: 'clear', payload: { path: props.path } })\r\n        }\r\n    }\r\n    function getOptionsData (options: ISelect | string) {\r\n        return typeof options === 'string' ? store.$map[options] : options;\r\n    }\r\n    function formInputChange(value: string, key: string) {\r\n        dispatch({ type: 'setActNbt', payload: { key, path: props.path, value }})\r\n    }\r\n    function formInputNumberChange(value: any, key: string) {\r\n        dispatch({ type: 'setActNbt', payload: { key, path: props.path, value }})\r\n    }\r\n    function formSwitchChange(value: boolean, key: string) {\r\n        dispatch({ type: 'setActNbt', payload: { key, path: props.path, value }})\r\n    }\r\n    function formSelectChange(value: string, key: string) {\r\n        dispatch({ type: 'setActNbt', payload: { key, path: props.path, value }})\r\n    }\r\n    function getField(tpl: string, nbt: INbt<NbtDataType>, key: string) {\r\n        const item = store.$nbtStore.getNbtObjectByName(tpl)[key];\r\n        const componentOptions = Array.isArray(item.subtype) ? item.subtype.map(v => ({ id: v, name: v })) : null\r\n        const componentValue = Array.isArray(item.subtype) ? item.subtype[0] : ''\r\n        const label = item.title ? item.title : key;\r\n        if (item.type === 'enum') {\r\n            const options = getOptionsData(item.enum)\r\n            return (\r\n                <React.Fragment key={key}>\r\n                    <Col style={{ textAlign: 'end', padding: '4px 16px 16px 0' }} span={4}>\r\n                        <Tooltip title={item.description}>\r\n                            <span>{label}</span>\r\n                        </Tooltip>\r\n                    </Col>\r\n                    <Col span={20} style={{ paddingBottom: 16 }}>\r\n                        <div className=\"nbt-item\" style={{ marginLeft: paddingLeft }}>\r\n                            <Select showSearch allowClear notFoundContent='暂无内容' placeholder='请选择' style={{ width: '100%' }}\r\n                                // filterOption={(value, { children }) => (children[0] + children[2]).includes(value)}\r\n                                value={(nbt[key] as INbtValue<string>).value}\r\n                                onChange={(value: string) => formSelectChange(value, key)}>\r\n                                {\r\n                                    typeof options[0] === 'string'\r\n                                        ? options.map((v: string) => <Select.Option key={v} value={v}>{v}</Select.Option>)\r\n                                        : options.map((v: ISelect) => <Select.Option key={v.id} value={v.id}>{v.name} - {v.id}</Select.Option>)\r\n                                }\r\n                            </Select>\r\n                        </div>\r\n                    </Col>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        if (item.type === 'object') {\r\n            return (\r\n                <React.Fragment key={key}>\r\n                    <Col span={24}>\r\n                        <Compound\r\n                            description={item.description}\r\n                            value={(nbt as INbt<INbtItem>)[key]}\r\n                            componentOptions={componentOptions}\r\n                            componentValue={componentValue}\r\n                            // @ts-ignore\r\n                            label={nbt[key].tpl ? nbt[key].tpl : label}\r\n                            path={[...props.path, key]} />\r\n                    </Col>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        if (item.type === 'string') {\r\n            return (\r\n                <React.Fragment key={key}>\r\n                    <Col style={{ textAlign: 'end', padding: '4px 16px 16px 0' }} span={4}>\r\n                        <Tooltip title={item.description}>\r\n                            <span>{label}</span>\r\n                        </Tooltip>\r\n                    </Col>\r\n                    <Col span={20} style={{ paddingBottom: 16 }}>\r\n                        <div className=\"nbt-item\" style={{ marginLeft: paddingLeft }}>\r\n                            <Input\r\n                                style={{ width: '100%' }}\r\n                                disabled={item.disabled}\r\n                                value={(nbt[key] as INbtValue<string>).value} \r\n                                onChange={e => formInputChange(e.target.value, key)}\r\n                                placeholder='请输入' />\r\n                        </div>\r\n                    </Col>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        if (item.type === 'list') {\r\n            let listValue = isSimpleType(item.subtype as string) \r\n                ? (nbt[key] as INbtValue<string[]>).value\r\n                : (nbt as INbt<INbtArrayItem>)[key].value\r\n            if (item.minItems && listValue.length !== item.minItems) {\r\n                listValue = Array.from({ length: item.minItems }, () => '') as string[]\r\n            }\r\n            return (\r\n                <React.Fragment key={key}>\r\n                    <Col span={24}>\r\n                        <List description={item.description} count={item.minItems} value={listValue} subtype={Array.isArray(item.subtype) ? item.subtype[0] : item.subtype } label={label} path={props.path} />\r\n                    </Col>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        if (item.type === 'bool') {\r\n            return (\r\n                <React.Fragment key={key}>\r\n                    <Col style={{ textAlign: 'end', padding: '4px 16px 16px 0' }} span={4}>\r\n                        <Tooltip title={item.description}>\r\n                            <span>{label}</span>\r\n                        </Tooltip>\r\n                    </Col>\r\n                    <Col span={20} style={{ paddingBottom: 16 }}>\r\n                        <div className=\"nbt-item\" style={{ marginLeft: paddingLeft }}>\r\n                            <Switch checked={(nbt[key] as INbtValue<boolean>).value} onChange={e => formSwitchChange(e, key)}/>\r\n                        </div>\r\n                    </Col>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        return (\r\n            <React.Fragment key={key}>\r\n                <Col style={{ textAlign: 'end', padding: '4px 16px 16px 0' }} span={4}>\r\n                    <Tooltip title={item.description}>\r\n                        <span>{label}</span>\r\n                    </Tooltip>\r\n                </Col>\r\n                <Col span={20} style={{ paddingBottom: 16 }}>\r\n                    <div className=\"nbt-item\" style={{ marginLeft: paddingLeft }}>\r\n                        <InputNumber \r\n                            style={{ width: '100%' }}\r\n                            disabled={item.disabled}\r\n                            value={(nbt[key] as INbtValue<number>).value} \r\n                            onChange={e => formInputNumberChange(e, key)}\r\n                            placeholder='请输入'/>\r\n                    </div>\r\n                </Col>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    function createItem (item: INbtItem) {\r\n        if (item) {\r\n            const { tpl, nbt } = item;\r\n            return nbt\r\n                ? Object.keys(nbt).map(key => getField(tpl, nbt, key))\r\n                : []\r\n        }\r\n        return []\r\n    }\r\n    function mouseEnter(e: React.MouseEvent<HTMLDivElement>) {\r\n        e.stopPropagation()\r\n        setMark(() => true)\r\n    }\r\n    function mouseOut(e: React.MouseEvent<HTMLDivElement>) {\r\n        setMark(() => false)\r\n    }\r\n    function output() {\r\n        const data = NbtItem.getItem(store.actNbt, props.path)\r\n        const json = JSON.stringify(data.toPureJson(), null, 2)\r\n        copy(json)\r\n        message.success('已复制到剪贴板')\r\n    }\r\n    function componentChange(e: RadioChangeEvent) {\r\n        dispatch({ type: 'update', payload: { path: props.path, tpl: e.target.value } })\r\n    }\r\n    function dropdownRender(menu: React.ReactNode) {\r\n        return (\r\n            <div>\r\n                {\r\n                    props.componentOptions\r\n                        ? (\r\n                            <div style={{ padding: '0 8px' }}>\r\n                                <Typography.Text style={{ paddingRight: 16 }} type=\"secondary\">选项</Typography.Text>\r\n                                <Radio.Group onChange={componentChange} defaultValue={props.componentValue}>\r\n                                    { props.componentOptions.map(item => <Radio key={item.id} value={item.id}>{item.name}</Radio>) }\r\n                                </Radio.Group>\r\n                                <Divider style={{ margin: '4px 0' }} />\r\n                            </div>\r\n                        )\r\n                        : null\r\n                }\r\n                {menu}\r\n            </div>\r\n        )\r\n    }\r\n    const defaultCls = mark ? `nbt-list nbt-compound` : 'nbt-compound'\r\n    const cls = [defaultCls, props.className]\r\n    return (\r\n        <Row className={cls.join(' ')}>\r\n            <Col span={24}>\r\n                <Row>\r\n                    <Col onMouseEnter={mouseEnter} onMouseLeave={mouseOut} span={4} style={{ textAlign: 'right', padding: '4px 16px 16px 0' }}>\r\n                        <Tooltip title={props.description}>\r\n                            <span>{props.label}</span>\r\n                        </Tooltip>\r\n                    </Col>\r\n                    <Col span={14} style={{ paddingBottom: 16 }}>\r\n                        <div className=\"nbt-item\" style={{ marginLeft: paddingLeft - 32 >= 0 ? paddingLeft - 32 : 0 }}>\r\n                            <Select\r\n                                allowClear\r\n                                mode='multiple'\r\n                                maxTagCount={0}\r\n                                placeholder='请选择'\r\n                                notFoundContent='暂无内容'\r\n                                style={{ width: '100%' }}\r\n                                onChange={change}\r\n                                value={props.value.has}\r\n                                onDeselect={deSelectChange}\r\n                                dropdownRender={dropdownRender}\r\n                                maxTagPlaceholder={(data) => `已选${data.length}项（${keyOptions.length}）`} \r\n                                onSelect={selectChange} >\r\n                                {\r\n                                    keyOptions.map((item: ISelect) => <Select.Option key={item.id} value={item.id}>{item.name}</Select.Option>)\r\n                                }\r\n                            </Select>\r\n                        </div>\r\n                    </Col>\r\n                    <Col span={6}>\r\n                        <ButtonGroup style={{ marginLeft: 16 }}>\r\n                            <Button type='ghost' onClick={() => setVisible(v => !v)} title='展开/折叠'>{ visible ? <UpOutlined /> : <DownOutlined /> }</Button>\r\n                            <Button type='ghost' onClick={output} title='生成'><SnippetsOutlined /></Button>\r\n                        </ButtonGroup>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n            { visible ? createItem(props.value) : null }\r\n        </Row>\r\n    )\r\n}","import React, { useEffect, useReducer } from \"react\";\r\nimport { Switch, Tag } from \"antd\";\r\nimport Compound from \"../../comps/Compound\";\r\nimport NbtItem from \"../../lib/Nbt/NbtItem\";\r\nimport NbtStore from \"../../lib/parse/config/NbtStore\";\r\nimport NbtArrayItem from \"../../lib/Nbt/NbtArrayItem\";\r\n\r\nexport interface IContext {\r\n    store: IState;\r\n    dispatch: React.Dispatch<IAction>;\r\n}\r\n\r\ninterface IState {\r\n    actNbt: NbtItem;\r\n    nbtJson: any;\r\n    $nbtStore: NbtStore;\r\n    $map: any;\r\n    indent: number;\r\n}\r\n\r\ninterface IAction {\r\n    type: string;\r\n    payload: any;\r\n}\r\n\r\nconst initialState: IState = {\r\n    actNbt: null,\r\n    nbtJson: {},\r\n    $nbtStore: new NbtStore(),\r\n    $map: {},\r\n    indent: 0,\r\n}\r\n\r\nexport const NbtContext = React.createContext<IContext>(null)\r\n\r\nfunction reducer(state: IState, action: IAction) {\r\n    const { type, payload } = action\r\n    if (type === 'initData') {\r\n        const { $nbtStore, $map } = payload\r\n        state.$nbtStore.merge($nbtStore)\r\n        return { ...state, $map }\r\n    }\r\n    if (type === 'addNbt') {\r\n        const actNbt = new NbtItem(payload, state.$nbtStore)\r\n        return { ...state, actNbt, nbtJson: actNbt.toJson() }\r\n    }\r\n    if (type === 'updateNbtJson') {\r\n        return { ...state, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'setActNbt') {\r\n        const { path, key, value, index } = payload\r\n        const item = NbtItem.getItem(state.actNbt, path)\r\n        item.setNbt(key, value, index)\r\n        return { ...state, actNbt: state.actNbt, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'add') {\r\n        const { path, key } = payload\r\n        const item = NbtItem.getItem(state.actNbt, path)\r\n        item.add(key)\r\n        return { ...state, actNbt: state.actNbt, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'remove') {\r\n        const { path, key } = payload\r\n        const item = NbtItem.getItem(state.actNbt, path)\r\n        item.remove(key)\r\n        return { ...state, actNbt: state.actNbt, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'clear') {\r\n        const { path } = payload\r\n        const item = NbtItem.getItem(state.actNbt, path)\r\n        item.clear()\r\n        return { ...state, actNbt: state.actNbt, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'update') {\r\n        const { tpl, path } = payload\r\n        const item = NbtItem.getItem(state.actNbt, path)\r\n        item.setTpl(tpl)\r\n        return { ...state, actNbt: state.actNbt, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'array/clear') {\r\n        const { path, key } = payload\r\n        const item = NbtItem.getItem(state.actNbt, path)\r\n        const nbt = item.getNbt(key)\r\n        if (nbt instanceof NbtArrayItem) {\r\n            nbt.clear()\r\n        } else {\r\n            item.setNbt(key, [], undefined)\r\n        }\r\n        return { ...state, actNbt: state.actNbt, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'array/remove') {\r\n        const { path, index, key } = payload\r\n        const nbt = NbtItem.getItem(state.actNbt, path).getNbt(key).value\r\n        nbt.splice(index, 1)\r\n        return { ...state, actNbt: state.actNbt, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'array/add') {\r\n        const { path, key } = payload\r\n        const item = NbtItem.getItem(state.actNbt, path).getNbt(key)\r\n        if (item instanceof NbtArrayItem) {\r\n            item.add()\r\n        } else {\r\n            item.value.push('')\r\n        }\r\n        return { ...state, actNbt: state.actNbt, nbtJson: state.actNbt.toJson() }\r\n    }\r\n    if (type === 'setIndent') {\r\n        const indent = payload\r\n        return { ...state, indent }\r\n    }\r\n    return state\r\n}\r\nexport default function() {\r\n    const [store, dispatch] = useReducer(reducer, initialState)\r\n\r\n    useEffect(() => {\r\n        fetch('./world.json').then(res => res.json()).then(res => {\r\n            dispatch({ type: 'initData', payload: { $nbtStore: res, $map: {} }})\r\n            tagClick(store.$nbtStore.getRootNodes()[0])\r\n        })\r\n    }, [])\r\n\r\n    function tagClick(tplName: string) {\r\n        dispatch({ type: 'addNbt', payload: tplName })\r\n    }\r\n    function switchIndent() {\r\n        dispatch({ type: 'setIndent', payload: !!store.indent ? 0 : 32 })\r\n    }\r\n    return (\r\n        <NbtContext.Provider value={{ store, dispatch }}>\r\n            <div style={{ textAlign: 'right' }}>\r\n                <Switch checkedChildren=\"开\" unCheckedChildren=\"关\" style={{ marginLeft: 16 }} onChange={switchIndent}></Switch>\r\n            </div>\r\n            {/* { \r\n                store.$nbtStore.getRootNodes().map(item => <Tag key={item} onClick={() => tagClick(item)}>{item}</Tag>) \r\n            } */}\r\n            {\r\n                store.actNbt && (\r\n                    <Compound\r\n                        className='root'\r\n                        description={''}\r\n                        label={store.actNbt.getTpl()}\r\n                        value={store.nbtJson}\r\n                        path={[]} />\r\n                )\r\n            }\r\n        </NbtContext.Provider>\r\n    )\r\n}","import { merge } from \"../../../util\"\r\nimport { GObject, ISelect, NbtType } from \"../../../util/interface\"\r\n\r\nexport type CompoundObject = GObject<NbtComponent>\r\nexport type NbtObject = GObject<NbtProps>\r\n\r\nexport interface NbtComponent {\r\n    base?: string[];\r\n    has?: string[] | boolean;\r\n    nbt?: NbtObject;\r\n    root?: boolean;\r\n}\r\nexport interface NbtProps {\r\n    type?: NbtType;\r\n    enum?: string | ISelect;\r\n    subtype?: string | string[];\r\n    default?: string | boolean | number;\r\n    title?: string;\r\n    description?: string;\r\n    disabled?: boolean;\r\n    link?: string[];\r\n    linkType?: string;\r\n\r\n    minItems?: number;\r\n    maxItems?: number;\r\n    max?: number;\r\n    min?: number;\r\n}\r\nexport default class NbtStore {\r\n    private store: CompoundObject = {};\r\n\r\n    constructor(data: CompoundObject = {}) {\r\n        this.store = data\r\n        this.merge(data)\r\n    }\r\n    \r\n    public merge(data: CompoundObject) {\r\n        merge(this.store, data)\r\n        Object.keys(data).reduce<CompoundObject>(\r\n            (s, k) => {\r\n                s[k] = this.build(k)\r\n                return s\r\n            },\r\n            this.store\r\n        )\r\n    }\r\n\r\n    private build(name: string, result = {}, has: string[] = []) {\r\n        if (has.includes(name)) {\r\n            return {}\r\n        }\r\n        const inst = this.store[name]\r\n        if (!inst) {\r\n            return {}\r\n        }\r\n        has.push(name)\r\n        if (inst.base) {\r\n            inst.base.forEach(v => merge(result, this.build(v, result, has)))\r\n        }\r\n        merge(result, inst)\r\n        return result\r\n    }\r\n\r\n    public getRootNodes(): string[] {\r\n        return Object.keys(this.store).filter((k) => this.store[k].root)\r\n    }\r\n    \r\n    public getNbtObjectByName(name: string) {\r\n        return this.store[name]?.nbt\r\n    }\r\n\r\n    public getComponentByName(name: string) {\r\n        return this.store[name]\r\n    }\r\n    \r\n    public getStore() {\r\n        return this.store\r\n    }\r\n}","import React from 'react';\nimport World from './view/World'\nimport './App.less';\nimport './lib/Nbt'\n\nexport default () => {\n    return (\n        <World />\n    )   \n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.less';\n\nReactDOM.render(\n  <div>\n        <h1>\n            Worldgen测试版\n            <span>匠心打造，追求极致</span>\n            <div className='right'>\n                <a href=\"https://hans000.gitee.io/mc-viewer/\" target='_blank'>viewer</a>\n                <a href=\"https://hans000.gitee.io/jtext-studio/\" target='_blank'>JText Studio</a>\n                <a href=\"https://gitee.com/hans000/worldgen\" target='_blank'>使用文档</a>\n                <a href=\"https://gitee.com/hans000/worldgen/issues\" target='_blank'> 问题反馈</a>\n                {/* <a href=\"https://gitee.com/hans000/worldgen/blob/master/CHANGELOG.md\" target='_blank'> 更新日志</a> */}\n            </div>\n        </h1>\n        <div className=\"cont\">\n            <App />\n        </div>\n    </div>\n  ,\n  document.getElementById('root')\n);"],"sourceRoot":""}